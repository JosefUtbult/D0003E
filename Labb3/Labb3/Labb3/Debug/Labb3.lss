
Labb3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000e52  00000ee6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000227  00800104  00800104  00000eea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000eea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ced  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2d  00000000  00000000  00002d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a63  00000000  00000000  00003966  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002bc  00000000  00000000  000043cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005cd  00000000  00000000  00004688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001aae  00000000  00000000  00004c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00006703  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__ctors_end>
   4:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   8:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
   c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  10:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  14:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  18:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  1c:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__vector_7>
  20:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  24:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  28:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  2c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  30:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  34:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  38:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  3c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  40:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  44:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  48:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  4c:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  50:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  54:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  58:	0c 94 76 00 	jmp	0xec	; 0xec <__bad_interrupt>
  5c:	92 02       	muls	r25, r18
  5e:	9e 02       	muls	r25, r30
  60:	aa 02       	muls	r26, r26
  62:	b6 02       	muls	r27, r22
  64:	c2 02       	muls	r28, r18
  66:	ce 02       	muls	r28, r30
  68:	da 02       	muls	r29, r26
  6a:	e6 02       	muls	r30, r22
  6c:	f2 02       	muls	r31, r18
  6e:	fe 02       	muls	r31, r30
  70:	42 04       	cpc	r4, r2
  72:	42 04       	cpc	r4, r2
  74:	42 04       	cpc	r4, r2
  76:	42 04       	cpc	r4, r2
  78:	42 04       	cpc	r4, r2
  7a:	42 04       	cpc	r4, r2
  7c:	42 04       	cpc	r4, r2
  7e:	0a 03       	fmul	r16, r18
  80:	16 03       	mulsu	r17, r22
  82:	22 03       	mulsu	r18, r18
  84:	2e 03       	fmul	r18, r22
  86:	3a 03       	fmul	r19, r18
  88:	46 03       	mulsu	r20, r22
  8a:	52 03       	mulsu	r21, r18
  8c:	5e 03       	fmul	r21, r22
  8e:	6a 03       	fmul	r22, r18
  90:	76 03       	mulsu	r23, r22
  92:	82 03       	fmuls	r16, r18
  94:	8e 03       	fmulsu	r16, r22
  96:	9a 03       	fmulsu	r17, r18
  98:	a6 03       	fmuls	r18, r22
  9a:	b2 03       	fmuls	r19, r18
  9c:	be 03       	fmulsu	r19, r22
  9e:	ca 03       	fmulsu	r20, r18
  a0:	d6 03       	fmuls	r21, r22
  a2:	e2 03       	fmuls	r22, r18
  a4:	ee 03       	fmulsu	r22, r22
  a6:	fa 03       	fmulsu	r23, r18
  a8:	06 04       	cpc	r0, r6
  aa:	12 04       	cpc	r1, r2
  ac:	1e 04       	cpc	r1, r14
  ae:	2a 04       	cpc	r2, r10
  b0:	36 04       	cpc	r3, r6

000000b2 <__ctors_end>:
  b2:	11 24       	eor	r1, r1
  b4:	1f be       	out	0x3f, r1	; 63
  b6:	cf ef       	ldi	r28, 0xFF	; 255
  b8:	d4 e0       	ldi	r29, 0x04	; 4
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a0 e0       	ldi	r26, 0x00	; 0
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	e2 e5       	ldi	r30, 0x52	; 82
  c6:	fe e0       	ldi	r31, 0x0E	; 14
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x10>
  ca:	05 90       	lpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	a4 30       	cpi	r26, 0x04	; 4
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0xc>

000000d4 <__do_clear_bss>:
  d4:	23 e0       	ldi	r18, 0x03	; 3
  d6:	a4 e0       	ldi	r26, 0x04	; 4
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	ab 32       	cpi	r26, 0x2B	; 43
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	0e 94 2f 05 	call	0xa5e	; 0xa5e <main>
  e8:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <_exit>

000000ec <__bad_interrupt>:
  ec:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f0 <LCDWritePackage>:
	LCDDR13 = 0x00;
	
	LCDDR15 = 0x00;
	LCDDR16 = 0x00;
	LCDDR17 = 0x00;
	LCDDR18 = 0x00;
  f0:	cf 92       	push	r12
  f2:	df 92       	push	r13
  f4:	ef 92       	push	r14
  f6:	ff 92       	push	r15
  f8:	0f 93       	push	r16
  fa:	1f 93       	push	r17
  fc:	99 23       	and	r25, r25
  fe:	0c f4       	brge	.+2      	; 0x102 <LCDWritePackage+0x12>
 100:	f7 c1       	rjmp	.+1006   	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	91 05       	cpc	r25, r1
 106:	8c f4       	brge	.+34     	; 0x12a <LCDWritePackage+0x3a>
 108:	e0 91 ec 00 	lds	r30, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	09 f0       	breq	.+2      	; 0x112 <LCDWritePackage+0x22>
 110:	9b c0       	rjmp	.+310    	; 0x248 <LCDWritePackage+0x158>
 112:	48 c0       	rjmp	.+144    	; 0x1a4 <LCDWritePackage+0xb4>
 114:	04 c0       	rjmp	.+8      	; 0x11e <LCDWritePackage+0x2e>
 116:	00 0f       	add	r16, r16
 118:	11 1f       	adc	r17, r17
 11a:	22 1f       	adc	r18, r18
 11c:	33 1f       	adc	r19, r19
 11e:	9a 95       	dec	r25
 120:	d2 f7       	brpl	.-12     	; 0x116 <LCDWritePackage+0x26>
 122:	08 2b       	or	r16, r24
 124:	00 93 fb 00 	sts	0x00FB, r16	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7e00fb>
 128:	e3 c1       	rjmp	.+966    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 12a:	84 30       	cpi	r24, 0x04	; 4
 12c:	91 05       	cpc	r25, r1
 12e:	8c f4       	brge	.+34     	; 0x152 <LCDWritePackage+0x62>
 130:	e0 91 ed 00 	lds	r30, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 134:	03 97       	sbiw	r24, 0x03	; 3
 136:	09 f0       	breq	.+2      	; 0x13a <LCDWritePackage+0x4a>
 138:	9f c0       	rjmp	.+318    	; 0x278 <LCDWritePackage+0x188>
 13a:	b6 c0       	rjmp	.+364    	; 0x2a8 <LCDWritePackage+0x1b8>
 13c:	04 c0       	rjmp	.+8      	; 0x146 <LCDWritePackage+0x56>
 13e:	00 0f       	add	r16, r16
 140:	11 1f       	adc	r17, r17
 142:	22 1f       	adc	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	9a 95       	dec	r25
 148:	d2 f7       	brpl	.-12     	; 0x13e <LCDWritePackage+0x4e>
 14a:	08 2b       	or	r16, r24
 14c:	00 93 fc 00 	sts	0x00FC, r16	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7e00fc>
 150:	cf c1       	rjmp	.+926    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 152:	86 30       	cpi	r24, 0x06	; 6
 154:	91 05       	cpc	r25, r1
 156:	8c f4       	brge	.+34     	; 0x17a <LCDWritePackage+0x8a>
 158:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 15c:	05 97       	sbiw	r24, 0x05	; 5
 15e:	09 f0       	breq	.+2      	; 0x162 <LCDWritePackage+0x72>
 160:	f5 c0       	rjmp	.+490    	; 0x34c <LCDWritePackage+0x25c>
 162:	0c c1       	rjmp	.+536    	; 0x37c <LCDWritePackage+0x28c>
 164:	04 c0       	rjmp	.+8      	; 0x16e <LCDWritePackage+0x7e>
 166:	00 0f       	add	r16, r16
 168:	11 1f       	adc	r17, r17
 16a:	22 1f       	adc	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	9a 95       	dec	r25
 170:	d2 f7       	brpl	.-12     	; 0x166 <LCDWritePackage+0x76>
 172:	08 2b       	or	r16, r24
 174:	00 93 fd 00 	sts	0x00FD, r16	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7e00fd>
 178:	bb c1       	rjmp	.+886    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 17a:	88 30       	cpi	r24, 0x08	; 8
 17c:	91 05       	cpc	r25, r1
 17e:	0c f0       	brlt	.+2      	; 0x182 <LCDWritePackage+0x92>
 180:	b7 c1       	rjmp	.+878    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 182:	e0 91 ef 00 	lds	r30, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 186:	07 97       	sbiw	r24, 0x07	; 7
 188:	09 f0       	breq	.+2      	; 0x18c <LCDWritePackage+0x9c>
 18a:	4a c1       	rjmp	.+660    	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 18c:	61 c1       	rjmp	.+706    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 18e:	04 c0       	rjmp	.+8      	; 0x198 <LCDWritePackage+0xa8>
 190:	00 0f       	add	r16, r16
 192:	11 1f       	adc	r17, r17
 194:	22 1f       	adc	r18, r18
 196:	33 1f       	adc	r19, r19
 198:	9a 95       	dec	r25
 19a:	d2 f7       	brpl	.-12     	; 0x190 <LCDWritePackage+0xa0>
 19c:	08 2b       	or	r16, r24
 19e:	00 93 fe 00 	sts	0x00FE, r16	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7e00fe>
 1a2:	a6 c1       	rjmp	.+844    	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
 1a4:	9e 2f       	mov	r25, r30
 1a6:	9f 70       	andi	r25, 0x0F	; 15
 1a8:	6b 01       	movw	r12, r22
 1aa:	e1 2c       	mov	r14, r1
 1ac:	f1 2c       	mov	r15, r1
 1ae:	cc 0c       	add	r12, r12
 1b0:	dd 1c       	adc	r13, r13
 1b2:	ee 1c       	adc	r14, r14
 1b4:	ff 1c       	adc	r15, r15
 1b6:	cc 0c       	add	r12, r12
 1b8:	dd 1c       	adc	r13, r13
 1ba:	ee 1c       	adc	r14, r14
 1bc:	ff 1c       	adc	r15, r15
 1be:	cc 0c       	add	r12, r12
 1c0:	dd 1c       	adc	r13, r13
 1c2:	ee 1c       	adc	r14, r14
 1c4:	ff 1c       	adc	r15, r15
 1c6:	cc 0c       	add	r12, r12
 1c8:	dd 1c       	adc	r13, r13
 1ca:	ee 1c       	adc	r14, r14
 1cc:	ff 1c       	adc	r15, r15
 1ce:	e9 2f       	mov	r30, r25
 1d0:	ec 29       	or	r30, r12
 1d2:	e0 93 ec 00 	sts	0x00EC, r30	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 1d6:	e1 ef       	ldi	r30, 0xF1	; 241
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	8f 70       	andi	r24, 0x0F	; 15
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	44 0f       	add	r20, r20
 1e4:	55 1f       	adc	r21, r21
 1e6:	66 1f       	adc	r22, r22
 1e8:	77 1f       	adc	r23, r23
 1ea:	44 0f       	add	r20, r20
 1ec:	55 1f       	adc	r21, r21
 1ee:	66 1f       	adc	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	44 0f       	add	r20, r20
 1f4:	55 1f       	adc	r21, r21
 1f6:	66 1f       	adc	r22, r22
 1f8:	77 1f       	adc	r23, r23
 1fa:	44 0f       	add	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	66 1f       	adc	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	48 2b       	or	r20, r24
 204:	40 83       	st	Z, r20
 206:	e6 ef       	ldi	r30, 0xF6	; 246
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	48 2f       	mov	r20, r24
 20e:	4f 70       	andi	r20, 0x0F	; 15
 210:	c9 01       	movw	r24, r18
 212:	a0 e0       	ldi	r26, 0x00	; 0
 214:	b0 e0       	ldi	r27, 0x00	; 0
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	aa 1f       	adc	r26, r26
 21c:	bb 1f       	adc	r27, r27
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	aa 1f       	adc	r26, r26
 224:	bb 1f       	adc	r27, r27
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	aa 1f       	adc	r26, r26
 22c:	bb 1f       	adc	r27, r27
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	aa 1f       	adc	r26, r26
 234:	bb 1f       	adc	r27, r27
 236:	84 2b       	or	r24, r20
 238:	80 83       	st	Z, r24
 23a:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7e00fb>
 23e:	8f 70       	andi	r24, 0x0F	; 15
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	94 e0       	ldi	r25, 0x04	; 4
 246:	66 cf       	rjmp	.-308    	; 0x114 <LCDWritePackage+0x24>
 248:	8e 2f       	mov	r24, r30
 24a:	80 7f       	andi	r24, 0xF0	; 240
 24c:	86 2b       	or	r24, r22
 24e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 252:	e1 ef       	ldi	r30, 0xF1	; 241
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	80 7f       	andi	r24, 0xF0	; 240
 25a:	48 2b       	or	r20, r24
 25c:	40 83       	st	Z, r20
 25e:	e6 ef       	ldi	r30, 0xF6	; 246
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	80 7f       	andi	r24, 0xF0	; 240
 266:	82 2b       	or	r24, r18
 268:	80 83       	st	Z, r24
 26a:	80 91 fb 00 	lds	r24, 0x00FB	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7e00fb>
 26e:	80 7f       	andi	r24, 0xF0	; 240
 270:	20 e0       	ldi	r18, 0x00	; 0
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	4e cf       	rjmp	.-356    	; 0x114 <LCDWritePackage+0x24>
 278:	8e 2f       	mov	r24, r30
 27a:	80 7f       	andi	r24, 0xF0	; 240
 27c:	86 2b       	or	r24, r22
 27e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 282:	e2 ef       	ldi	r30, 0xF2	; 242
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	80 7f       	andi	r24, 0xF0	; 240
 28a:	48 2b       	or	r20, r24
 28c:	40 83       	st	Z, r20
 28e:	e7 ef       	ldi	r30, 0xF7	; 247
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	80 7f       	andi	r24, 0xF0	; 240
 296:	82 2b       	or	r24, r18
 298:	80 83       	st	Z, r24
 29a:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7e00fc>
 29e:	80 7f       	andi	r24, 0xF0	; 240
 2a0:	20 e0       	ldi	r18, 0x00	; 0
 2a2:	30 e0       	ldi	r19, 0x00	; 0
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	4a cf       	rjmp	.-364    	; 0x13c <LCDWritePackage+0x4c>
 2a8:	9e 2f       	mov	r25, r30
 2aa:	9f 70       	andi	r25, 0x0F	; 15
 2ac:	6b 01       	movw	r12, r22
 2ae:	e1 2c       	mov	r14, r1
 2b0:	f1 2c       	mov	r15, r1
 2b2:	cc 0c       	add	r12, r12
 2b4:	dd 1c       	adc	r13, r13
 2b6:	ee 1c       	adc	r14, r14
 2b8:	ff 1c       	adc	r15, r15
 2ba:	cc 0c       	add	r12, r12
 2bc:	dd 1c       	adc	r13, r13
 2be:	ee 1c       	adc	r14, r14
 2c0:	ff 1c       	adc	r15, r15
 2c2:	cc 0c       	add	r12, r12
 2c4:	dd 1c       	adc	r13, r13
 2c6:	ee 1c       	adc	r14, r14
 2c8:	ff 1c       	adc	r15, r15
 2ca:	cc 0c       	add	r12, r12
 2cc:	dd 1c       	adc	r13, r13
 2ce:	ee 1c       	adc	r14, r14
 2d0:	ff 1c       	adc	r15, r15
 2d2:	e9 2f       	mov	r30, r25
 2d4:	ec 29       	or	r30, r12
 2d6:	e0 93 ed 00 	sts	0x00ED, r30	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 2da:	e2 ef       	ldi	r30, 0xF2	; 242
 2dc:	f0 e0       	ldi	r31, 0x00	; 0
 2de:	80 81       	ld	r24, Z
 2e0:	8f 70       	andi	r24, 0x0F	; 15
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	44 0f       	add	r20, r20
 2e8:	55 1f       	adc	r21, r21
 2ea:	66 1f       	adc	r22, r22
 2ec:	77 1f       	adc	r23, r23
 2ee:	44 0f       	add	r20, r20
 2f0:	55 1f       	adc	r21, r21
 2f2:	66 1f       	adc	r22, r22
 2f4:	77 1f       	adc	r23, r23
 2f6:	44 0f       	add	r20, r20
 2f8:	55 1f       	adc	r21, r21
 2fa:	66 1f       	adc	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	44 0f       	add	r20, r20
 300:	55 1f       	adc	r21, r21
 302:	66 1f       	adc	r22, r22
 304:	77 1f       	adc	r23, r23
 306:	48 2b       	or	r20, r24
 308:	40 83       	st	Z, r20
 30a:	e7 ef       	ldi	r30, 0xF7	; 247
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	48 2f       	mov	r20, r24
 312:	4f 70       	andi	r20, 0x0F	; 15
 314:	c9 01       	movw	r24, r18
 316:	a0 e0       	ldi	r26, 0x00	; 0
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	88 0f       	add	r24, r24
 31c:	99 1f       	adc	r25, r25
 31e:	aa 1f       	adc	r26, r26
 320:	bb 1f       	adc	r27, r27
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	aa 1f       	adc	r26, r26
 328:	bb 1f       	adc	r27, r27
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	aa 1f       	adc	r26, r26
 330:	bb 1f       	adc	r27, r27
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	aa 1f       	adc	r26, r26
 338:	bb 1f       	adc	r27, r27
 33a:	84 2b       	or	r24, r20
 33c:	80 83       	st	Z, r24
 33e:	80 91 fc 00 	lds	r24, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7e00fc>
 342:	8f 70       	andi	r24, 0x0F	; 15
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	94 e0       	ldi	r25, 0x04	; 4
 34a:	f8 ce       	rjmp	.-528    	; 0x13c <LCDWritePackage+0x4c>
 34c:	8e 2f       	mov	r24, r30
 34e:	80 7f       	andi	r24, 0xF0	; 240
 350:	86 2b       	or	r24, r22
 352:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 356:	e3 ef       	ldi	r30, 0xF3	; 243
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	80 81       	ld	r24, Z
 35c:	80 7f       	andi	r24, 0xF0	; 240
 35e:	48 2b       	or	r20, r24
 360:	40 83       	st	Z, r20
 362:	e8 ef       	ldi	r30, 0xF8	; 248
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	80 81       	ld	r24, Z
 368:	80 7f       	andi	r24, 0xF0	; 240
 36a:	82 2b       	or	r24, r18
 36c:	80 83       	st	Z, r24
 36e:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7e00fd>
 372:	80 7f       	andi	r24, 0xF0	; 240
 374:	20 e0       	ldi	r18, 0x00	; 0
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	f4 ce       	rjmp	.-536    	; 0x164 <LCDWritePackage+0x74>
 37c:	6b 01       	movw	r12, r22
 37e:	e1 2c       	mov	r14, r1
 380:	f1 2c       	mov	r15, r1
 382:	cc 0c       	add	r12, r12
 384:	dd 1c       	adc	r13, r13
 386:	ee 1c       	adc	r14, r14
 388:	ff 1c       	adc	r15, r15
 38a:	cc 0c       	add	r12, r12
 38c:	dd 1c       	adc	r13, r13
 38e:	ee 1c       	adc	r14, r14
 390:	ff 1c       	adc	r15, r15
 392:	cc 0c       	add	r12, r12
 394:	dd 1c       	adc	r13, r13
 396:	ee 1c       	adc	r14, r14
 398:	ff 1c       	adc	r15, r15
 39a:	cc 0c       	add	r12, r12
 39c:	dd 1c       	adc	r13, r13
 39e:	ee 1c       	adc	r14, r14
 3a0:	ff 1c       	adc	r15, r15
 3a2:	9e 2f       	mov	r25, r30
 3a4:	9f 70       	andi	r25, 0x0F	; 15
 3a6:	e9 2f       	mov	r30, r25
 3a8:	ec 29       	or	r30, r12
 3aa:	e0 93 ee 00 	sts	0x00EE, r30	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 3ae:	e3 ef       	ldi	r30, 0xF3	; 243
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	80 81       	ld	r24, Z
 3b4:	60 e0       	ldi	r22, 0x00	; 0
 3b6:	70 e0       	ldi	r23, 0x00	; 0
 3b8:	44 0f       	add	r20, r20
 3ba:	55 1f       	adc	r21, r21
 3bc:	66 1f       	adc	r22, r22
 3be:	77 1f       	adc	r23, r23
 3c0:	44 0f       	add	r20, r20
 3c2:	55 1f       	adc	r21, r21
 3c4:	66 1f       	adc	r22, r22
 3c6:	77 1f       	adc	r23, r23
 3c8:	44 0f       	add	r20, r20
 3ca:	55 1f       	adc	r21, r21
 3cc:	66 1f       	adc	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	44 0f       	add	r20, r20
 3d2:	55 1f       	adc	r21, r21
 3d4:	66 1f       	adc	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	8f 70       	andi	r24, 0x0F	; 15
 3da:	48 2b       	or	r20, r24
 3dc:	40 83       	st	Z, r20
 3de:	e8 ef       	ldi	r30, 0xF8	; 248
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	40 81       	ld	r20, Z
 3e4:	c9 01       	movw	r24, r18
 3e6:	a0 e0       	ldi	r26, 0x00	; 0
 3e8:	b0 e0       	ldi	r27, 0x00	; 0
 3ea:	88 0f       	add	r24, r24
 3ec:	99 1f       	adc	r25, r25
 3ee:	aa 1f       	adc	r26, r26
 3f0:	bb 1f       	adc	r27, r27
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	aa 1f       	adc	r26, r26
 3f8:	bb 1f       	adc	r27, r27
 3fa:	88 0f       	add	r24, r24
 3fc:	99 1f       	adc	r25, r25
 3fe:	aa 1f       	adc	r26, r26
 400:	bb 1f       	adc	r27, r27
 402:	88 0f       	add	r24, r24
 404:	99 1f       	adc	r25, r25
 406:	aa 1f       	adc	r26, r26
 408:	bb 1f       	adc	r27, r27
 40a:	24 2f       	mov	r18, r20
 40c:	2f 70       	andi	r18, 0x0F	; 15
 40e:	82 2b       	or	r24, r18
 410:	80 83       	st	Z, r24
 412:	80 91 fd 00 	lds	r24, 0x00FD	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7e00fd>
 416:	8f 70       	andi	r24, 0x0F	; 15
 418:	20 e0       	ldi	r18, 0x00	; 0
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	94 e0       	ldi	r25, 0x04	; 4
 41e:	a2 ce       	rjmp	.-700    	; 0x164 <LCDWritePackage+0x74>
 420:	8e 2f       	mov	r24, r30
 422:	80 7f       	andi	r24, 0xF0	; 240
 424:	86 2b       	or	r24, r22
 426:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 42a:	e3 ef       	ldi	r30, 0xF3	; 243
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	80 81       	ld	r24, Z
 430:	80 7f       	andi	r24, 0xF0	; 240
 432:	48 2b       	or	r20, r24
 434:	40 83       	st	Z, r20
 436:	e9 ef       	ldi	r30, 0xF9	; 249
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	80 81       	ld	r24, Z
 43c:	80 7f       	andi	r24, 0xF0	; 240
 43e:	82 2b       	or	r24, r18
 440:	80 83       	st	Z, r24
 442:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7e00fe>
 446:	80 7f       	andi	r24, 0xF0	; 240
 448:	20 e0       	ldi	r18, 0x00	; 0
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	9f ce       	rjmp	.-706    	; 0x18e <LCDWritePackage+0x9e>
 450:	cb 01       	movw	r24, r22
 452:	a0 e0       	ldi	r26, 0x00	; 0
 454:	b0 e0       	ldi	r27, 0x00	; 0
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	aa 1f       	adc	r26, r26
 45c:	bb 1f       	adc	r27, r27
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	aa 1f       	adc	r26, r26
 464:	bb 1f       	adc	r27, r27
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	aa 1f       	adc	r26, r26
 46c:	bb 1f       	adc	r27, r27
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	aa 1f       	adc	r26, r26
 474:	bb 1f       	adc	r27, r27
 476:	ef 70       	andi	r30, 0x0F	; 15
 478:	8e 2b       	or	r24, r30
 47a:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 47e:	e3 ef       	ldi	r30, 0xF3	; 243
 480:	f0 e0       	ldi	r31, 0x00	; 0
 482:	80 81       	ld	r24, Z
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	70 e0       	ldi	r23, 0x00	; 0
 488:	44 0f       	add	r20, r20
 48a:	55 1f       	adc	r21, r21
 48c:	66 1f       	adc	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	44 0f       	add	r20, r20
 492:	55 1f       	adc	r21, r21
 494:	66 1f       	adc	r22, r22
 496:	77 1f       	adc	r23, r23
 498:	44 0f       	add	r20, r20
 49a:	55 1f       	adc	r21, r21
 49c:	66 1f       	adc	r22, r22
 49e:	77 1f       	adc	r23, r23
 4a0:	44 0f       	add	r20, r20
 4a2:	55 1f       	adc	r21, r21
 4a4:	66 1f       	adc	r22, r22
 4a6:	77 1f       	adc	r23, r23
 4a8:	8f 70       	andi	r24, 0x0F	; 15
 4aa:	48 2b       	or	r20, r24
 4ac:	40 83       	st	Z, r20
 4ae:	e9 ef       	ldi	r30, 0xF9	; 249
 4b0:	f0 e0       	ldi	r31, 0x00	; 0
 4b2:	40 81       	ld	r20, Z
 4b4:	c9 01       	movw	r24, r18
 4b6:	a0 e0       	ldi	r26, 0x00	; 0
 4b8:	b0 e0       	ldi	r27, 0x00	; 0
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	aa 1f       	adc	r26, r26
 4c0:	bb 1f       	adc	r27, r27
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	aa 1f       	adc	r26, r26
 4c8:	bb 1f       	adc	r27, r27
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	aa 1f       	adc	r26, r26
 4d0:	bb 1f       	adc	r27, r27
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	aa 1f       	adc	r26, r26
 4d8:	bb 1f       	adc	r27, r27
 4da:	24 2f       	mov	r18, r20
 4dc:	2f 70       	andi	r18, 0x0F	; 15
 4de:	82 2b       	or	r24, r18
 4e0:	80 83       	st	Z, r24
 4e2:	80 91 fe 00 	lds	r24, 0x00FE	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7e00fe>
 4e6:	8f 70       	andi	r24, 0x0F	; 15
 4e8:	20 e0       	ldi	r18, 0x00	; 0
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	94 e0       	ldi	r25, 0x04	; 4
 4ee:	4f ce       	rjmp	.-866    	; 0x18e <LCDWritePackage+0x9e>
 4f0:	1f 91       	pop	r17
 4f2:	0f 91       	pop	r16
 4f4:	ff 90       	pop	r15
 4f6:	ef 90       	pop	r14
 4f8:	df 90       	pop	r13
 4fa:	cf 90       	pop	r12
 4fc:	08 95       	ret

000004fe <writeChar>:
 4fe:	0f 93       	push	r16
 500:	1f 93       	push	r17
 502:	66 30       	cpi	r22, 0x06	; 6
 504:	71 05       	cpc	r23, r1
 506:	08 f0       	brcs	.+2      	; 0x50a <__stack+0xb>
 508:	c8 c1       	rjmp	.+912    	; 0x89a <__stack+0x39b>
 50a:	db 01       	movw	r26, r22
 50c:	48 2f       	mov	r20, r24
 50e:	50 e0       	ldi	r21, 0x00	; 0
 510:	fa 01       	movw	r30, r20
 512:	f0 97       	sbiw	r30, 0x30	; 48
 514:	eb 32       	cpi	r30, 0x2B	; 43
 516:	f1 05       	cpc	r31, r1
 518:	08 f0       	brcs	.+2      	; 0x51c <__stack+0x1d>
 51a:	b4 c1       	rjmp	.+872    	; 0x884 <__stack+0x385>
 51c:	e2 5d       	subi	r30, 0xD2	; 210
 51e:	ff 4f       	sbci	r31, 0xFF	; 255
 520:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <__tablejump2__>
 524:	05 e0       	ldi	r16, 0x05	; 5
 526:	10 e0       	ldi	r17, 0x00	; 0
 528:	25 e0       	ldi	r18, 0x05	; 5
 52a:	30 e0       	ldi	r19, 0x00	; 0
 52c:	45 e0       	ldi	r20, 0x05	; 5
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	69 e0       	ldi	r22, 0x09	; 9
 532:	70 e0       	ldi	r23, 0x00	; 0
 534:	cd 01       	movw	r24, r26
 536:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 53a:	af c1       	rjmp	.+862    	; 0x89a <__stack+0x39b>
 53c:	00 e0       	ldi	r16, 0x00	; 0
 53e:	10 e0       	ldi	r17, 0x00	; 0
 540:	21 e0       	ldi	r18, 0x01	; 1
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	41 e0       	ldi	r20, 0x01	; 1
 546:	50 e0       	ldi	r21, 0x00	; 0
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	70 e0       	ldi	r23, 0x00	; 0
 54c:	cd 01       	movw	r24, r26
 54e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 552:	a3 c1       	rjmp	.+838    	; 0x89a <__stack+0x39b>
 554:	05 e0       	ldi	r16, 0x05	; 5
 556:	10 e0       	ldi	r17, 0x00	; 0
 558:	28 e0       	ldi	r18, 0x08	; 8
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	41 e0       	ldi	r20, 0x01	; 1
 55e:	50 e0       	ldi	r21, 0x00	; 0
 560:	61 e0       	ldi	r22, 0x01	; 1
 562:	70 e0       	ldi	r23, 0x00	; 0
 564:	cd 01       	movw	r24, r26
 566:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 56a:	97 c1       	rjmp	.+814    	; 0x89a <__stack+0x39b>
 56c:	01 e0       	ldi	r16, 0x01	; 1
 56e:	10 e0       	ldi	r17, 0x00	; 0
 570:	2b e0       	ldi	r18, 0x0B	; 11
 572:	30 e0       	ldi	r19, 0x00	; 0
 574:	41 e0       	ldi	r20, 0x01	; 1
 576:	50 e0       	ldi	r21, 0x00	; 0
 578:	61 e0       	ldi	r22, 0x01	; 1
 57a:	70 e0       	ldi	r23, 0x00	; 0
 57c:	cd 01       	movw	r24, r26
 57e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 582:	8b c1       	rjmp	.+790    	; 0x89a <__stack+0x39b>
 584:	00 e0       	ldi	r16, 0x00	; 0
 586:	10 e0       	ldi	r17, 0x00	; 0
 588:	2b e0       	ldi	r18, 0x0B	; 11
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	45 e0       	ldi	r20, 0x05	; 5
 58e:	50 e0       	ldi	r21, 0x00	; 0
 590:	60 e0       	ldi	r22, 0x00	; 0
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	cd 01       	movw	r24, r26
 596:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 59a:	7f c1       	rjmp	.+766    	; 0x89a <__stack+0x39b>
 59c:	01 e0       	ldi	r16, 0x01	; 1
 59e:	10 e0       	ldi	r17, 0x00	; 0
 5a0:	2b e0       	ldi	r18, 0x0B	; 11
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	44 e0       	ldi	r20, 0x04	; 4
 5a6:	50 e0       	ldi	r21, 0x00	; 0
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	cd 01       	movw	r24, r26
 5ae:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 5b2:	73 c1       	rjmp	.+742    	; 0x89a <__stack+0x39b>
 5b4:	01 e0       	ldi	r16, 0x01	; 1
 5b6:	10 e0       	ldi	r17, 0x00	; 0
 5b8:	2f e0       	ldi	r18, 0x0F	; 15
 5ba:	30 e0       	ldi	r19, 0x00	; 0
 5bc:	44 e0       	ldi	r20, 0x04	; 4
 5be:	50 e0       	ldi	r21, 0x00	; 0
 5c0:	61 e0       	ldi	r22, 0x01	; 1
 5c2:	70 e0       	ldi	r23, 0x00	; 0
 5c4:	cd 01       	movw	r24, r26
 5c6:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 5ca:	67 c1       	rjmp	.+718    	; 0x89a <__stack+0x39b>
 5cc:	04 e0       	ldi	r16, 0x04	; 4
 5ce:	10 e0       	ldi	r17, 0x00	; 0
 5d0:	20 e0       	ldi	r18, 0x00	; 0
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	40 e0       	ldi	r20, 0x00	; 0
 5d6:	50 e0       	ldi	r21, 0x00	; 0
 5d8:	69 e0       	ldi	r22, 0x09	; 9
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	cd 01       	movw	r24, r26
 5de:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 5e2:	5b c1       	rjmp	.+694    	; 0x89a <__stack+0x39b>
 5e4:	01 e0       	ldi	r16, 0x01	; 1
 5e6:	10 e0       	ldi	r17, 0x00	; 0
 5e8:	2f e0       	ldi	r18, 0x0F	; 15
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	45 e0       	ldi	r20, 0x05	; 5
 5ee:	50 e0       	ldi	r21, 0x00	; 0
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	cd 01       	movw	r24, r26
 5f6:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 5fa:	4f c1       	rjmp	.+670    	; 0x89a <__stack+0x39b>
 5fc:	01 e0       	ldi	r16, 0x01	; 1
 5fe:	10 e0       	ldi	r17, 0x00	; 0
 600:	2b e0       	ldi	r18, 0x0B	; 11
 602:	30 e0       	ldi	r19, 0x00	; 0
 604:	45 e0       	ldi	r20, 0x05	; 5
 606:	50 e0       	ldi	r21, 0x00	; 0
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	70 e0       	ldi	r23, 0x00	; 0
 60c:	cd 01       	movw	r24, r26
 60e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 612:	43 c1       	rjmp	.+646    	; 0x89a <__stack+0x39b>
 614:	00 e0       	ldi	r16, 0x00	; 0
 616:	10 e0       	ldi	r17, 0x00	; 0
 618:	2f e0       	ldi	r18, 0x0F	; 15
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	45 e0       	ldi	r20, 0x05	; 5
 61e:	50 e0       	ldi	r21, 0x00	; 0
 620:	61 e0       	ldi	r22, 0x01	; 1
 622:	70 e0       	ldi	r23, 0x00	; 0
 624:	cd 01       	movw	r24, r26
 626:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 62a:	37 c1       	rjmp	.+622    	; 0x89a <__stack+0x39b>
 62c:	01 e0       	ldi	r16, 0x01	; 1
 62e:	10 e0       	ldi	r17, 0x00	; 0
 630:	2f e0       	ldi	r18, 0x0F	; 15
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	45 e0       	ldi	r20, 0x05	; 5
 636:	50 e0       	ldi	r21, 0x00	; 0
 638:	61 e0       	ldi	r22, 0x01	; 1
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	cd 01       	movw	r24, r26
 63e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 642:	2b c1       	rjmp	.+598    	; 0x89a <__stack+0x39b>
 644:	01 e0       	ldi	r16, 0x01	; 1
 646:	10 e0       	ldi	r17, 0x00	; 0
 648:	24 e0       	ldi	r18, 0x04	; 4
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	44 e0       	ldi	r20, 0x04	; 4
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	61 e0       	ldi	r22, 0x01	; 1
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	cd 01       	movw	r24, r26
 656:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 65a:	1f c1       	rjmp	.+574    	; 0x89a <__stack+0x39b>
 65c:	04 e0       	ldi	r16, 0x04	; 4
 65e:	10 e0       	ldi	r17, 0x00	; 0
 660:	24 e0       	ldi	r18, 0x04	; 4
 662:	30 e0       	ldi	r19, 0x00	; 0
 664:	46 e0       	ldi	r20, 0x06	; 6
 666:	50 e0       	ldi	r21, 0x00	; 0
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	70 e0       	ldi	r23, 0x00	; 0
 66c:	cd 01       	movw	r24, r26
 66e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 672:	13 c1       	rjmp	.+550    	; 0x89a <__stack+0x39b>
 674:	01 e0       	ldi	r16, 0x01	; 1
 676:	10 e0       	ldi	r17, 0x00	; 0
 678:	26 e0       	ldi	r18, 0x06	; 6
 67a:	30 e0       	ldi	r19, 0x00	; 0
 67c:	44 e0       	ldi	r20, 0x04	; 4
 67e:	50 e0       	ldi	r21, 0x00	; 0
 680:	61 e0       	ldi	r22, 0x01	; 1
 682:	70 e0       	ldi	r23, 0x00	; 0
 684:	cd 01       	movw	r24, r26
 686:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 68a:	07 c1       	rjmp	.+526    	; 0x89a <__stack+0x39b>
 68c:	00 e0       	ldi	r16, 0x00	; 0
 68e:	10 e0       	ldi	r17, 0x00	; 0
 690:	2e e0       	ldi	r18, 0x0E	; 14
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	44 e0       	ldi	r20, 0x04	; 4
 696:	50 e0       	ldi	r21, 0x00	; 0
 698:	61 e0       	ldi	r22, 0x01	; 1
 69a:	70 e0       	ldi	r23, 0x00	; 0
 69c:	cd 01       	movw	r24, r26
 69e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 6a2:	fb c0       	rjmp	.+502    	; 0x89a <__stack+0x39b>
 6a4:	01 e0       	ldi	r16, 0x01	; 1
 6a6:	10 e0       	ldi	r17, 0x00	; 0
 6a8:	2d e0       	ldi	r18, 0x0D	; 13
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	44 e0       	ldi	r20, 0x04	; 4
 6ae:	50 e0       	ldi	r21, 0x00	; 0
 6b0:	61 e0       	ldi	r22, 0x01	; 1
 6b2:	70 e0       	ldi	r23, 0x00	; 0
 6b4:	cd 01       	movw	r24, r26
 6b6:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 6ba:	ef c0       	rjmp	.+478    	; 0x89a <__stack+0x39b>
 6bc:	00 e0       	ldi	r16, 0x00	; 0
 6be:	10 e0       	ldi	r17, 0x00	; 0
 6c0:	2f e0       	ldi	r18, 0x0F	; 15
 6c2:	30 e0       	ldi	r19, 0x00	; 0
 6c4:	45 e0       	ldi	r20, 0x05	; 5
 6c6:	50 e0       	ldi	r21, 0x00	; 0
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	70 e0       	ldi	r23, 0x00	; 0
 6cc:	cd 01       	movw	r24, r26
 6ce:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 6d2:	e3 c0       	rjmp	.+454    	; 0x89a <__stack+0x39b>
 6d4:	02 e0       	ldi	r16, 0x02	; 2
 6d6:	10 e0       	ldi	r17, 0x00	; 0
 6d8:	20 e0       	ldi	r18, 0x00	; 0
 6da:	30 e0       	ldi	r19, 0x00	; 0
 6dc:	48 e0       	ldi	r20, 0x08	; 8
 6de:	50 e0       	ldi	r21, 0x00	; 0
 6e0:	60 e0       	ldi	r22, 0x00	; 0
 6e2:	70 e0       	ldi	r23, 0x00	; 0
 6e4:	cd 01       	movw	r24, r26
 6e6:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 6ea:	d7 c0       	rjmp	.+430    	; 0x89a <__stack+0x39b>
 6ec:	01 e0       	ldi	r16, 0x01	; 1
 6ee:	10 e0       	ldi	r17, 0x00	; 0
 6f0:	21 e0       	ldi	r18, 0x01	; 1
 6f2:	30 e0       	ldi	r19, 0x00	; 0
 6f4:	41 e0       	ldi	r20, 0x01	; 1
 6f6:	50 e0       	ldi	r21, 0x00	; 0
 6f8:	60 e0       	ldi	r22, 0x00	; 0
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	cd 01       	movw	r24, r26
 6fe:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 702:	cb c0       	rjmp	.+406    	; 0x89a <__stack+0x39b>
 704:	08 e0       	ldi	r16, 0x08	; 8
 706:	10 e0       	ldi	r17, 0x00	; 0
 708:	26 e0       	ldi	r18, 0x06	; 6
 70a:	30 e0       	ldi	r19, 0x00	; 0
 70c:	44 e0       	ldi	r20, 0x04	; 4
 70e:	50 e0       	ldi	r21, 0x00	; 0
 710:	68 e0       	ldi	r22, 0x08	; 8
 712:	70 e0       	ldi	r23, 0x00	; 0
 714:	cd 01       	movw	r24, r26
 716:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 71a:	bf c0       	rjmp	.+382    	; 0x89a <__stack+0x39b>
 71c:	01 e0       	ldi	r16, 0x01	; 1
 71e:	10 e0       	ldi	r17, 0x00	; 0
 720:	24 e0       	ldi	r18, 0x04	; 4
 722:	30 e0       	ldi	r19, 0x00	; 0
 724:	44 e0       	ldi	r20, 0x04	; 4
 726:	50 e0       	ldi	r21, 0x00	; 0
 728:	60 e0       	ldi	r22, 0x00	; 0
 72a:	70 e0       	ldi	r23, 0x00	; 0
 72c:	cd 01       	movw	r24, r26
 72e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 732:	b3 c0       	rjmp	.+358    	; 0x89a <__stack+0x39b>
 734:	00 e0       	ldi	r16, 0x00	; 0
 736:	10 e0       	ldi	r17, 0x00	; 0
 738:	25 e0       	ldi	r18, 0x05	; 5
 73a:	30 e0       	ldi	r19, 0x00	; 0
 73c:	47 e0       	ldi	r20, 0x07	; 7
 73e:	50 e0       	ldi	r21, 0x00	; 0
 740:	68 e0       	ldi	r22, 0x08	; 8
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	cd 01       	movw	r24, r26
 746:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 74a:	a7 c0       	rjmp	.+334    	; 0x89a <__stack+0x39b>
 74c:	08 e0       	ldi	r16, 0x08	; 8
 74e:	10 e0       	ldi	r17, 0x00	; 0
 750:	25 e0       	ldi	r18, 0x05	; 5
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	47 e0       	ldi	r20, 0x07	; 7
 756:	50 e0       	ldi	r21, 0x00	; 0
 758:	60 e0       	ldi	r22, 0x00	; 0
 75a:	70 e0       	ldi	r23, 0x00	; 0
 75c:	cd 01       	movw	r24, r26
 75e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 762:	9b c0       	rjmp	.+310    	; 0x89a <__stack+0x39b>
 764:	01 e0       	ldi	r16, 0x01	; 1
 766:	10 e0       	ldi	r17, 0x00	; 0
 768:	25 e0       	ldi	r18, 0x05	; 5
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	45 e0       	ldi	r20, 0x05	; 5
 76e:	50 e0       	ldi	r21, 0x00	; 0
 770:	61 e0       	ldi	r22, 0x01	; 1
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	cd 01       	movw	r24, r26
 776:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 77a:	8f c0       	rjmp	.+286    	; 0x89a <__stack+0x39b>
 77c:	00 e0       	ldi	r16, 0x00	; 0
 77e:	10 e0       	ldi	r17, 0x00	; 0
 780:	2e e0       	ldi	r18, 0x0E	; 14
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	45 e0       	ldi	r20, 0x05	; 5
 786:	50 e0       	ldi	r21, 0x00	; 0
 788:	61 e0       	ldi	r22, 0x01	; 1
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	cd 01       	movw	r24, r26
 78e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 792:	83 c0       	rjmp	.+262    	; 0x89a <__stack+0x39b>
 794:	09 e0       	ldi	r16, 0x09	; 9
 796:	10 e0       	ldi	r17, 0x00	; 0
 798:	25 e0       	ldi	r18, 0x05	; 5
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	45 e0       	ldi	r20, 0x05	; 5
 79e:	50 e0       	ldi	r21, 0x00	; 0
 7a0:	61 e0       	ldi	r22, 0x01	; 1
 7a2:	70 e0       	ldi	r23, 0x00	; 0
 7a4:	cd 01       	movw	r24, r26
 7a6:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 7aa:	77 c0       	rjmp	.+238    	; 0x89a <__stack+0x39b>
 7ac:	08 e0       	ldi	r16, 0x08	; 8
 7ae:	10 e0       	ldi	r17, 0x00	; 0
 7b0:	2e e0       	ldi	r18, 0x0E	; 14
 7b2:	30 e0       	ldi	r19, 0x00	; 0
 7b4:	45 e0       	ldi	r20, 0x05	; 5
 7b6:	50 e0       	ldi	r21, 0x00	; 0
 7b8:	61 e0       	ldi	r22, 0x01	; 1
 7ba:	70 e0       	ldi	r23, 0x00	; 0
 7bc:	cd 01       	movw	r24, r26
 7be:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 7c2:	6b c0       	rjmp	.+214    	; 0x89a <__stack+0x39b>
 7c4:	01 e0       	ldi	r16, 0x01	; 1
 7c6:	10 e0       	ldi	r17, 0x00	; 0
 7c8:	2b e0       	ldi	r18, 0x0B	; 11
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	44 e0       	ldi	r20, 0x04	; 4
 7ce:	50 e0       	ldi	r21, 0x00	; 0
 7d0:	61 e0       	ldi	r22, 0x01	; 1
 7d2:	70 e0       	ldi	r23, 0x00	; 0
 7d4:	cd 01       	movw	r24, r26
 7d6:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 7da:	5f c0       	rjmp	.+190    	; 0x89a <__stack+0x39b>
 7dc:	02 e0       	ldi	r16, 0x02	; 2
 7de:	10 e0       	ldi	r17, 0x00	; 0
 7e0:	20 e0       	ldi	r18, 0x00	; 0
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	48 e0       	ldi	r20, 0x08	; 8
 7e6:	50 e0       	ldi	r21, 0x00	; 0
 7e8:	61 e0       	ldi	r22, 0x01	; 1
 7ea:	70 e0       	ldi	r23, 0x00	; 0
 7ec:	cd 01       	movw	r24, r26
 7ee:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 7f2:	53 c0       	rjmp	.+166    	; 0x89a <__stack+0x39b>
 7f4:	01 e0       	ldi	r16, 0x01	; 1
 7f6:	10 e0       	ldi	r17, 0x00	; 0
 7f8:	25 e0       	ldi	r18, 0x05	; 5
 7fa:	30 e0       	ldi	r19, 0x00	; 0
 7fc:	45 e0       	ldi	r20, 0x05	; 5
 7fe:	50 e0       	ldi	r21, 0x00	; 0
 800:	60 e0       	ldi	r22, 0x00	; 0
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	cd 01       	movw	r24, r26
 806:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 80a:	47 c0       	rjmp	.+142    	; 0x89a <__stack+0x39b>
 80c:	04 e0       	ldi	r16, 0x04	; 4
 80e:	10 e0       	ldi	r17, 0x00	; 0
 810:	24 e0       	ldi	r18, 0x04	; 4
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	44 e0       	ldi	r20, 0x04	; 4
 816:	50 e0       	ldi	r21, 0x00	; 0
 818:	68 e0       	ldi	r22, 0x08	; 8
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	cd 01       	movw	r24, r26
 81e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 822:	3b c0       	rjmp	.+118    	; 0x89a <__stack+0x39b>
 824:	03 e0       	ldi	r16, 0x03	; 3
 826:	10 e0       	ldi	r17, 0x00	; 0
 828:	25 e0       	ldi	r18, 0x05	; 5
 82a:	30 e0       	ldi	r19, 0x00	; 0
 82c:	45 e0       	ldi	r20, 0x05	; 5
 82e:	50 e0       	ldi	r21, 0x00	; 0
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	70 e0       	ldi	r23, 0x00	; 0
 834:	cd 01       	movw	r24, r26
 836:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 83a:	2f c0       	rjmp	.+94     	; 0x89a <__stack+0x39b>
 83c:	0c e0       	ldi	r16, 0x0C	; 12
 83e:	10 e0       	ldi	r17, 0x00	; 0
 840:	20 e0       	ldi	r18, 0x00	; 0
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	42 e0       	ldi	r20, 0x02	; 2
 846:	50 e0       	ldi	r21, 0x00	; 0
 848:	68 e0       	ldi	r22, 0x08	; 8
 84a:	70 e0       	ldi	r23, 0x00	; 0
 84c:	cd 01       	movw	r24, r26
 84e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 852:	23 c0       	rjmp	.+70     	; 0x89a <__stack+0x39b>
 854:	02 e0       	ldi	r16, 0x02	; 2
 856:	10 e0       	ldi	r17, 0x00	; 0
 858:	20 e0       	ldi	r18, 0x00	; 0
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	42 e0       	ldi	r20, 0x02	; 2
 85e:	50 e0       	ldi	r21, 0x00	; 0
 860:	68 e0       	ldi	r22, 0x08	; 8
 862:	70 e0       	ldi	r23, 0x00	; 0
 864:	cd 01       	movw	r24, r26
 866:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 86a:	17 c0       	rjmp	.+46     	; 0x89a <__stack+0x39b>
 86c:	05 e0       	ldi	r16, 0x05	; 5
 86e:	10 e0       	ldi	r17, 0x00	; 0
 870:	20 e0       	ldi	r18, 0x00	; 0
 872:	30 e0       	ldi	r19, 0x00	; 0
 874:	40 e0       	ldi	r20, 0x00	; 0
 876:	50 e0       	ldi	r21, 0x00	; 0
 878:	69 e0       	ldi	r22, 0x09	; 9
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	cd 01       	movw	r24, r26
 87e:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 882:	0b c0       	rjmp	.+22     	; 0x89a <__stack+0x39b>
 884:	02 e0       	ldi	r16, 0x02	; 2
 886:	10 e0       	ldi	r17, 0x00	; 0
 888:	28 e0       	ldi	r18, 0x08	; 8
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	41 e0       	ldi	r20, 0x01	; 1
 88e:	50 e0       	ldi	r21, 0x00	; 0
 890:	61 e0       	ldi	r22, 0x01	; 1
 892:	70 e0       	ldi	r23, 0x00	; 0
 894:	cd 01       	movw	r24, r26
 896:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 89a:	1f 91       	pop	r17
 89c:	0f 91       	pop	r16
 89e:	08 95       	ret

000008a0 <initLCD>:

// Inits the LCD by using some magic

void initLCD(){
	
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
 8a0:	87 eb       	ldi	r24, 0xB7	; 183
 8a2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	LCDFRR = (0<<LCDPS2) | (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
 8a6:	87 e0       	ldi	r24, 0x07	; 7
 8a8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
 8ac:	8f e0       	ldi	r24, 0x0F	; 15
 8ae:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
	LCDCRA = (1<<LCDEN);
 8b2:	80 e8       	ldi	r24, 0x80	; 128
 8b4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 8b8:	08 95       	ret

000008ba <checkClock>:

// Reads the joystick
int readJoystick() {
	return (PINB & (1 << 7)) ? 1 : 0;

}
 8ba:	c0 e0       	ldi	r28, 0x00	; 0
 8bc:	d0 e0       	ldi	r29, 0x00	; 0
 8be:	ff 24       	eor	r15, r15
 8c0:	f3 94       	inc	r15
 8c2:	c1 2c       	mov	r12, r1
 8c4:	68 94       	set
 8c6:	dd 24       	eor	r13, r13
 8c8:	d2 f8       	bld	r13, 2
 8ca:	e1 2c       	mov	r14, r1
 8cc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <interruptCounter>
 8d0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <interruptCounter+0x1>
 8d4:	44 97       	sbiw	r24, 0x14	; 20
 8d6:	dc f0       	brlt	.+54     	; 0x90e <checkClock+0x54>
 8d8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <interruptCounter+0x1>
 8dc:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <interruptCounter>
 8e0:	20 97       	sbiw	r28, 0x00	; 0
 8e2:	19 f4       	brne	.+6      	; 0x8ea <checkClock+0x30>
 8e4:	60 e0       	ldi	r22, 0x00	; 0
 8e6:	70 e0       	ldi	r23, 0x00	; 0
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <checkClock+0x34>
 8ea:	6d 2d       	mov	r22, r13
 8ec:	7e 2d       	mov	r23, r14
 8ee:	00 e0       	ldi	r16, 0x00	; 0
 8f0:	10 e0       	ldi	r17, 0x00	; 0
 8f2:	20 e0       	ldi	r18, 0x00	; 0
 8f4:	30 e0       	ldi	r19, 0x00	; 0
 8f6:	40 e0       	ldi	r20, 0x00	; 0
 8f8:	50 e0       	ldi	r21, 0x00	; 0
 8fa:	82 e0       	ldi	r24, 0x02	; 2
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	0e 94 78 00 	call	0xf0	; 0xf0 <LCDWritePackage>
 902:	8f 2d       	mov	r24, r15
 904:	cd 2b       	or	r28, r29
 906:	09 f0       	breq	.+2      	; 0x90a <checkClock+0x50>
 908:	8c 2d       	mov	r24, r12
 90a:	c8 2f       	mov	r28, r24
 90c:	d0 e0       	ldi	r29, 0x00	; 0
 90e:	0e 94 3b 06 	call	0xc76	; 0xc76 <yield>
 912:	dc cf       	rjmp	.-72     	; 0x8cc <checkClock+0x12>

00000914 <initJoystick>:
 914:	27 98       	cbi	0x04, 7	; 4
 916:	2f 9a       	sbi	0x05, 7	; 5
 918:	08 95       	ret

0000091a <isPrime>:
	
	

// Checks wheter a number is a prime number by brute force
int isPrime(long i) {
 91a:	cf 92       	push	r12
 91c:	df 92       	push	r13
 91e:	ef 92       	push	r14
 920:	ff 92       	push	r15
 922:	cf 93       	push	r28
 924:	df 93       	push	r29
 926:	6b 01       	movw	r12, r22
 928:	7c 01       	movw	r14, r24

	for (int j = 2; j < i; j++) {
 92a:	83 e0       	ldi	r24, 0x03	; 3
 92c:	c8 16       	cp	r12, r24
 92e:	d1 04       	cpc	r13, r1
 930:	e1 04       	cpc	r14, r1
 932:	f1 04       	cpc	r15, r1
 934:	7c f1       	brlt	.+94     	; 0x994 <isPrime+0x7a>

		if (!(i % j)) {
 936:	d7 01       	movw	r26, r14
 938:	c6 01       	movw	r24, r12
 93a:	81 70       	andi	r24, 0x01	; 1
 93c:	99 27       	eor	r25, r25
 93e:	aa 27       	eor	r26, r26
 940:	b0 78       	andi	r27, 0x80	; 128
 942:	bb 23       	and	r27, r27
 944:	54 f4       	brge	.+20     	; 0x95a <isPrime+0x40>
 946:	01 97       	sbiw	r24, 0x01	; 1
 948:	a1 09       	sbc	r26, r1
 94a:	b1 09       	sbc	r27, r1
 94c:	8e 6f       	ori	r24, 0xFE	; 254
 94e:	9f 6f       	ori	r25, 0xFF	; 255
 950:	af 6f       	ori	r26, 0xFF	; 255
 952:	bf 6f       	ori	r27, 0xFF	; 255
 954:	01 96       	adiw	r24, 0x01	; 1
 956:	a1 1d       	adc	r26, r1
 958:	b1 1d       	adc	r27, r1
 95a:	89 2b       	or	r24, r25
 95c:	8a 2b       	or	r24, r26
 95e:	8b 2b       	or	r24, r27
 960:	e1 f0       	breq	.+56     	; 0x99a <isPrime+0x80>
 962:	c2 e0       	ldi	r28, 0x02	; 2
 964:	d0 e0       	ldi	r29, 0x00	; 0
 966:	08 c0       	rjmp	.+16     	; 0x978 <isPrime+0x5e>
 968:	c7 01       	movw	r24, r14
 96a:	b6 01       	movw	r22, r12
 96c:	0e 94 8b 06 	call	0xd16	; 0xd16 <__divmodsi4>
 970:	67 2b       	or	r22, r23
 972:	68 2b       	or	r22, r24
 974:	69 2b       	or	r22, r25
 976:	a1 f0       	breq	.+40     	; 0x9a0 <isPrime+0x86>
	

// Checks wheter a number is a prime number by brute force
int isPrime(long i) {

	for (int j = 2; j < i; j++) {
 978:	21 96       	adiw	r28, 0x01	; 1
 97a:	9e 01       	movw	r18, r28
 97c:	0d 2e       	mov	r0, r29
 97e:	00 0c       	add	r0, r0
 980:	44 0b       	sbc	r20, r20
 982:	55 0b       	sbc	r21, r21
 984:	2c 15       	cp	r18, r12
 986:	3d 05       	cpc	r19, r13
 988:	4e 05       	cpc	r20, r14
 98a:	5f 05       	cpc	r21, r15
 98c:	6c f3       	brlt	.-38     	; 0x968 <isPrime+0x4e>

		}

	}

	return 1;
 98e:	81 e0       	ldi	r24, 0x01	; 1
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	08 c0       	rjmp	.+16     	; 0x9a4 <isPrime+0x8a>
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	05 c0       	rjmp	.+10     	; 0x9a4 <isPrime+0x8a>

	for (int j = 2; j < i; j++) {

		if (!(i % j)) {

			return 0;
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <isPrime+0x8a>
 9a0:	80 e0       	ldi	r24, 0x00	; 0
 9a2:	90 e0       	ldi	r25, 0x00	; 0

	}

	return 1;

}
 9a4:	df 91       	pop	r29
 9a6:	cf 91       	pop	r28
 9a8:	ff 90       	pop	r15
 9aa:	ef 90       	pop	r14
 9ac:	df 90       	pop	r13
 9ae:	cf 90       	pop	r12
 9b0:	08 95       	ret

000009b2 <printAt>:


void printAt(int num, int pos) {
 9b2:	ef 92       	push	r14
 9b4:	ff 92       	push	r15
 9b6:	0f 93       	push	r16
 9b8:	1f 93       	push	r17
 9ba:	cf 93       	push	r28
 9bc:	df 93       	push	r29
 9be:	7c 01       	movw	r14, r24
 9c0:	eb 01       	movw	r28, r22
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
 9c2:	64 e6       	ldi	r22, 0x64	; 100
 9c4:	70 e0       	ldi	r23, 0x00	; 0
 9c6:	0e 94 77 06 	call	0xcee	; 0xcee <__divmodhi4>
 9ca:	0a e0       	ldi	r16, 0x0A	; 10
 9cc:	10 e0       	ldi	r17, 0x00	; 0
 9ce:	b8 01       	movw	r22, r16
 9d0:	0e 94 77 06 	call	0xcee	; 0xcee <__divmodhi4>
 9d4:	86 2f       	mov	r24, r22
 9d6:	be 01       	movw	r22, r28
 9d8:	80 5d       	subi	r24, 0xD0	; 208
 9da:	0e 94 7f 02 	call	0x4fe	; 0x4fe <writeChar>
	pp++;
	writeChar( num % 10 + '0', pp);
 9de:	21 96       	adiw	r28, 0x01	; 1
 9e0:	c7 01       	movw	r24, r14
 9e2:	b8 01       	movw	r22, r16
 9e4:	0e 94 77 06 	call	0xcee	; 0xcee <__divmodhi4>
 9e8:	be 01       	movw	r22, r28
 9ea:	80 5d       	subi	r24, 0xD0	; 208
 9ec:	0e 94 7f 02 	call	0x4fe	; 0x4fe <writeChar>
 9f0:	df 91       	pop	r29
 9f2:	cf 91       	pop	r28
 9f4:	1f 91       	pop	r17
 9f6:	0f 91       	pop	r16
 9f8:	ff 90       	pop	r15
 9fa:	ef 90       	pop	r14
 9fc:	08 95       	ret

000009fe <checkJoystick>:
	spawn(checkClock, 0);
	checkJoystick();
}

void checkJoystick(){
	initJoystick();
 9fe:	0e 94 8a 04 	call	0x914	; 0x914 <initJoystick>
	//state = !readJoystick();
}

// Reads the joystick
int readJoystick() {
	return (PINB & (1 << 7)) ? 1 : 0;
 a02:	83 b1       	in	r24, 0x03	; 3
}

void checkJoystick(){
	initJoystick();
	int counter = 0;
	int state = !readJoystick();
 a04:	08 2e       	mov	r0, r24
 a06:	00 0c       	add	r0, r0
 a08:	99 0b       	sbc	r25, r25
 a0a:	80 95       	com	r24
 a0c:	90 95       	com	r25
 a0e:	c9 2f       	mov	r28, r25
 a10:	cc 1f       	adc	r28, r28
 a12:	cc 27       	eor	r28, r28
 a14:	cc 1f       	adc	r28, r28
 a16:	80 e0       	ldi	r24, 0x00	; 0
 a18:	d8 2f       	mov	r29, r24
	checkJoystick();
}

void checkJoystick(){
	initJoystick();
	int counter = 0;
 a1a:	40 e0       	ldi	r20, 0x00	; 0
 a1c:	50 e0       	ldi	r21, 0x00	; 0
				// lock(&ppMutex);
				printAt(counter++, 4);
				// unlock(&ppMutex);
			}
			
			state = !state;
 a1e:	11 e0       	ldi	r17, 0x01	; 1
 a20:	00 e0       	ldi	r16, 0x00	; 0
	//state = !readJoystick();
}

// Reads the joystick
int readJoystick() {
	return (PINB & (1 << 7)) ? 1 : 0;
 a22:	23 b1       	in	r18, 0x03	; 3
	initJoystick();
	int counter = 0;
	int state = !readJoystick();
	
	while(1){
		if(state != readJoystick()){
 a24:	02 2e       	mov	r0, r18
 a26:	00 0c       	add	r0, r0
 a28:	33 0b       	sbc	r19, r19
 a2a:	22 27       	eor	r18, r18
 a2c:	33 0f       	add	r19, r19
 a2e:	22 1f       	adc	r18, r18
 a30:	33 27       	eor	r19, r19
 a32:	c2 17       	cp	r28, r18
 a34:	d3 07       	cpc	r29, r19
 a36:	a9 f3       	breq	.-22     	; 0xa22 <checkJoystick+0x24>
			
			if(!state){
 a38:	20 97       	sbiw	r28, 0x00	; 0
 a3a:	51 f4       	brne	.+20     	; 0xa50 <checkJoystick+0x52>
				// lock(&ppMutex);
				printAt(counter++, 4);
 a3c:	7a 01       	movw	r14, r20
 a3e:	8f ef       	ldi	r24, 0xFF	; 255
 a40:	e8 1a       	sub	r14, r24
 a42:	f8 0a       	sbc	r15, r24
 a44:	64 e0       	ldi	r22, 0x04	; 4
 a46:	70 e0       	ldi	r23, 0x00	; 0
 a48:	ca 01       	movw	r24, r20
 a4a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <printAt>
 a4e:	a7 01       	movw	r20, r14
				// unlock(&ppMutex);
			}
			
			state = !state;
 a50:	91 2f       	mov	r25, r17
 a52:	cd 2b       	or	r28, r29
 a54:	09 f0       	breq	.+2      	; 0xa58 <checkJoystick+0x5a>
 a56:	90 2f       	mov	r25, r16
 a58:	c9 2f       	mov	r28, r25
 a5a:	d0 e0       	ldi	r29, 0x00	; 0
 a5c:	e2 cf       	rjmp	.-60     	; 0xa22 <checkJoystick+0x24>

00000a5e <main>:

void checkClock(int arg);

int main(void)
{
	CLKPR = 0x80;
 a5e:	e1 e6       	ldi	r30, 0x61	; 97
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	80 e8       	ldi	r24, 0x80	; 128
 a64:	80 83       	st	Z, r24
	CLKPR = 0x0;
 a66:	10 82       	st	Z, r1
		
	initLCD();
 a68:	0e 94 50 04 	call	0x8a0	; 0x8a0 <initLCD>
	
	spawn(countPrime, 0);
 a6c:	60 e0       	ldi	r22, 0x00	; 0
 a6e:	70 e0       	ldi	r23, 0x00	; 0
 a70:	84 e4       	ldi	r24, 0x44	; 68
 a72:	95 e0       	ldi	r25, 0x05	; 5
 a74:	0e 94 a0 05 	call	0xb40	; 0xb40 <spawn>
	spawn(checkClock, 0);
 a78:	60 e0       	ldi	r22, 0x00	; 0
 a7a:	70 e0       	ldi	r23, 0x00	; 0
 a7c:	8d e5       	ldi	r24, 0x5D	; 93
 a7e:	94 e0       	ldi	r25, 0x04	; 4
 a80:	0e 94 a0 05 	call	0xb40	; 0xb40 <spawn>
	checkJoystick();
 a84:	0e 94 ff 04 	call	0x9fe	; 0x9fe <checkJoystick>

00000a88 <countPrime>:
	}
	
}

void countPrime(int arg){
	int currentPrime = 2;
 a88:	c2 e0       	ldi	r28, 0x02	; 2
 a8a:	d0 e0       	ldi	r29, 0x00	; 0
	while(1){
		if(isPrime(currentPrime)){
 a8c:	be 01       	movw	r22, r28
 a8e:	0d 2e       	mov	r0, r29
 a90:	00 0c       	add	r0, r0
 a92:	88 0b       	sbc	r24, r24
 a94:	99 0b       	sbc	r25, r25
 a96:	0e 94 8d 04 	call	0x91a	; 0x91a <isPrime>
 a9a:	89 2b       	or	r24, r25
 a9c:	29 f0       	breq	.+10     	; 0xaa8 <countPrime+0x20>
			// lock(&ppMutex);
			printAt(currentPrime,0);
 a9e:	60 e0       	ldi	r22, 0x00	; 0
 aa0:	70 e0       	ldi	r23, 0x00	; 0
 aa2:	ce 01       	movw	r24, r28
 aa4:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <printAt>
			// unlock(&ppMutex);
		
		}
		currentPrime++;
 aa8:	21 96       	adiw	r28, 0x01	; 1
	}
 aaa:	f0 cf       	rjmp	.-32     	; 0xa8c <countPrime+0x4>

00000aac <enqueue>:
	
    yield();
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 aac:	dc 01       	movw	r26, r24
 aae:	15 96       	adiw	r26, 0x05	; 5
 ab0:	1c 92       	st	X, r1
 ab2:	1e 92       	st	-X, r1
 ab4:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 ab6:	db 01       	movw	r26, r22
 ab8:	ed 91       	ld	r30, X+
 aba:	fc 91       	ld	r31, X
 abc:	11 97       	sbiw	r26, 0x01	; 1
 abe:	30 97       	sbiw	r30, 0x00	; 0
 ac0:	21 f4       	brne	.+8      	; 0xaca <enqueue+0x1e>
        *queue = p;
 ac2:	8d 93       	st	X+, r24
 ac4:	9c 93       	st	X, r25
 ac6:	08 95       	ret
    } else {
        thread q = *queue;
        while (q->next)
            q = q->next;
 ac8:	f9 01       	movw	r30, r18
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 aca:	24 81       	ldd	r18, Z+4	; 0x04
 acc:	35 81       	ldd	r19, Z+5	; 0x05
 ace:	21 15       	cp	r18, r1
 ad0:	31 05       	cpc	r19, r1
 ad2:	d1 f7       	brne	.-12     	; 0xac8 <enqueue+0x1c>
            q = q->next;
        q->next = p;
 ad4:	95 83       	std	Z+5, r25	; 0x05
 ad6:	84 83       	std	Z+4, r24	; 0x04
 ad8:	08 95       	ret

00000ada <dequeue>:
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 ada:	dc 01       	movw	r26, r24
 adc:	ed 91       	ld	r30, X+
 ade:	fc 91       	ld	r31, X
 ae0:	11 97       	sbiw	r26, 0x01	; 1
    if (*queue) {
 ae2:	30 97       	sbiw	r30, 0x00	; 0
 ae4:	39 f4       	brne	.+14     	; 0xaf4 <dequeue+0x1a>
        *queue = (*queue)->next;
    } else {
		writeChar('E', 2);
 ae6:	62 e0       	ldi	r22, 0x02	; 2
 ae8:	70 e0       	ldi	r23, 0x00	; 0
 aea:	85 e4       	ldi	r24, 0x45	; 69
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	0e 94 7f 02 	call	0x4fe	; 0x4fe <writeChar>
 af2:	ff cf       	rjmp	.-2      	; 0xaf2 <dequeue+0x18>
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
        *queue = (*queue)->next;
 af4:	24 81       	ldd	r18, Z+4	; 0x04
 af6:	35 81       	ldd	r19, Z+5	; 0x05
 af8:	2d 93       	st	X+, r18
 afa:	3c 93       	st	X, r19
		writeChar('E', 2);
        // Empty queue, kernel panic!!!
        while (1) ;  // not much else to do...
    }
    return p;
}
 afc:	cf 01       	movw	r24, r30
 afe:	08 95       	ret

00000b00 <dispatch>:

static void dispatch(thread next) {
 b00:	cf 93       	push	r28
 b02:	df 93       	push	r29
 b04:	00 d0       	rcall	.+0      	; 0xb06 <dispatch+0x6>
 b06:	cd b7       	in	r28, 0x3d	; 61
 b08:	de b7       	in	r29, 0x3e	; 62
 b0a:	9a 83       	std	Y+2, r25	; 0x02
 b0c:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 b0e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 b12:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 b16:	06 96       	adiw	r24, 0x06	; 6
 b18:	0e 94 e6 06 	call	0xdcc	; 0xdcc <setjmp>
 b1c:	89 2b       	or	r24, r25
 b1e:	59 f4       	brne	.+22     	; 0xb36 <dispatch+0x36>
        current = next;
 b20:	89 81       	ldd	r24, Y+1	; 0x01
 b22:	9a 81       	ldd	r25, Y+2	; 0x02
 b24:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 b28:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
        longjmp(next->context,1);
 b2c:	61 e0       	ldi	r22, 0x01	; 1
 b2e:	70 e0       	ldi	r23, 0x00	; 0
 b30:	06 96       	adiw	r24, 0x06	; 6
 b32:	0e 94 06 07 	call	0xe0c	; 0xe0c <longjmp>
    }
}
 b36:	0f 90       	pop	r0
 b38:	0f 90       	pop	r0
 b3a:	df 91       	pop	r29
 b3c:	cf 91       	pop	r28
 b3e:	08 95       	ret

00000b40 <spawn>:

void spawn(void (* function)(int), int arg) {
 b40:	ef 92       	push	r14
 b42:	ff 92       	push	r15
 b44:	0f 93       	push	r16
 b46:	1f 93       	push	r17
 b48:	cf 93       	push	r28
 b4a:	df 93       	push	r29
 b4c:	00 d0       	rcall	.+0      	; 0xb4e <spawn+0xe>
 b4e:	cd b7       	in	r28, 0x3d	; 61
 b50:	de b7       	in	r29, 0x3e	; 62
 b52:	7c 01       	movw	r14, r24
 b54:	8b 01       	movw	r16, r22
    thread newp;

    DISABLE();
 b56:	f8 94       	cli
    if (!initialized) initialize();
 b58:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 b5c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 b60:	89 2b       	or	r24, r25
 b62:	09 f0       	breq	.+2      	; 0xb66 <spawn+0x26>
 b64:	3f c0       	rjmp	.+126    	; 0xbe4 <spawn+0xa4>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 b66:	84 ee       	ldi	r24, 0xE4	; 228
 b68:	91 e0       	ldi	r25, 0x01	; 1
 b6a:	90 93 7c 01 	sts	0x017C, r25	; 0x80017c <threads+0x5>
 b6e:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <threads+0x4>
 b72:	81 e5       	ldi	r24, 0x51	; 81
 b74:	92 e0       	ldi	r25, 0x02	; 2
 b76:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <threads+0x72>
 b7a:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <threads+0x71>
 b7e:	8e eb       	ldi	r24, 0xBE	; 190
 b80:	92 e0       	ldi	r25, 0x02	; 2
 b82:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <threads+0xdf>
 b86:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 b8a:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <threads+0x14c>
 b8e:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <threads+0x14b>

	interruptCounter = 0;
 b92:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <interruptCounter+0x1>
 b96:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <interruptCounter>
thread current = &initp;

static void initClockInterrupt(){
	
	// Sets OC1A/PCINT13 to compare and interrupt
	PORTB |= (1 << PB7) | (1 << PB5);
 b9a:	85 b1       	in	r24, 0x05	; 5
 b9c:	80 6a       	ori	r24, 0xA0	; 160
 b9e:	85 b9       	out	0x05, r24	; 5
	
	// Clock stuff
	// Set OC1A/OC1B on Compare Match (Set output to high level)
	TCCR1A |= (1 << COM1A1) | (1 << COM1A0);
 ba0:	e0 e8       	ldi	r30, 0x80	; 128
 ba2:	f0 e0       	ldi	r31, 0x00	; 0
 ba4:	80 81       	ld	r24, Z
 ba6:	80 6c       	ori	r24, 0xC0	; 192
 ba8:	80 83       	st	Z, r24

	// Sets the timer to CTC mode
	TCCR1B |= (1 << WGM12);
 baa:	e1 e8       	ldi	r30, 0x81	; 129
 bac:	f0 e0       	ldi	r31, 0x00	; 0
 bae:	80 81       	ld	r24, Z
 bb0:	88 60       	ori	r24, 0x08	; 8
 bb2:	80 83       	st	Z, r24

	// Sets the clock select to internal clock with a prescale of 1024
	TCCR1B |= (1 << CS12) | (1 << CS10);
 bb4:	80 81       	ld	r24, Z
 bb6:	85 60       	ori	r24, 0x05	; 5
 bb8:	80 83       	st	Z, r24

	//
	TIMSK1 |= (1 << OCIE1A);
 bba:	ef e6       	ldi	r30, 0x6F	; 111
 bbc:	f0 e0       	ldi	r31, 0x00	; 0
 bbe:	80 81       	ld	r24, Z
 bc0:	82 60       	ori	r24, 0x02	; 2
 bc2:	80 83       	st	Z, r24

	// Sets the compare register
	OCR1A = DELAY;
 bc4:	87 e8       	ldi	r24, 0x87	; 135
 bc6:	91 e0       	ldi	r25, 0x01	; 1
 bc8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 bcc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	// Clears the timer
	TCNT1 = 0;
 bd0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 bd4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	interruptCounter = 0;
	
	initClockInterrupt();
	
    initialized = 1;
 bd8:	81 e0       	ldi	r24, 0x01	; 1
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 be0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
    thread newp;

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
 be4:	82 e0       	ldi	r24, 0x02	; 2
 be6:	91 e0       	ldi	r25, 0x01	; 1
 be8:	0e 94 6d 05 	call	0xada	; 0xada <dequeue>
 bec:	9a 83       	std	Y+2, r25	; 0x02
 bee:	89 83       	std	Y+1, r24	; 0x01
    newp->function = function;
 bf0:	fc 01       	movw	r30, r24
 bf2:	f1 82       	std	Z+1, r15	; 0x01
 bf4:	e0 82       	st	Z, r14
    newp->arg = arg;
 bf6:	13 83       	std	Z+3, r17	; 0x03
 bf8:	02 83       	std	Z+2, r16	; 0x02
    newp->next = NULL;
 bfa:	15 82       	std	Z+5, r1	; 0x05
 bfc:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 bfe:	06 96       	adiw	r24, 0x06	; 6
 c00:	0e 94 e6 06 	call	0xdcc	; 0xdcc <setjmp>
 c04:	01 97       	sbiw	r24, 0x01	; 1
 c06:	e1 f4       	brne	.+56     	; 0xc40 <spawn+0x100>
        ENABLE();
 c08:	78 94       	sei
        current->function(current->arg);
 c0a:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__data_start>
 c0e:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__data_start+0x1>
 c12:	ed 91       	ld	r30, X+
 c14:	fc 91       	ld	r31, X
 c16:	11 97       	sbiw	r26, 0x01	; 1
 c18:	12 96       	adiw	r26, 0x02	; 2
 c1a:	8d 91       	ld	r24, X+
 c1c:	9c 91       	ld	r25, X
 c1e:	13 97       	sbiw	r26, 0x03	; 3
 c20:	09 95       	icall
        DISABLE();
 c22:	f8 94       	cli
        enqueue(current, &freeQ);
 c24:	62 e0       	ldi	r22, 0x02	; 2
 c26:	71 e0       	ldi	r23, 0x01	; 1
 c28:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 c2c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 c30:	0e 94 56 05 	call	0xaac	; 0xaac <enqueue>
        dispatch(dequeue(&readyQ));
 c34:	86 e0       	ldi	r24, 0x06	; 6
 c36:	91 e0       	ldi	r25, 0x01	; 1
 c38:	0e 94 6d 05 	call	0xada	; 0xada <dequeue>
 c3c:	0e 94 80 05 	call	0xb00	; 0xb00 <dispatch>
    }
    SETSTACK(&newp->context, &newp->stack);
 c40:	e9 81       	ldd	r30, Y+1	; 0x01
 c42:	fa 81       	ldd	r31, Y+2	; 0x02
 c44:	36 96       	adiw	r30, 0x06	; 6
 c46:	89 81       	ldd	r24, Y+1	; 0x01
 c48:	9a 81       	ldd	r25, Y+2	; 0x02
 c4a:	87 59       	subi	r24, 0x97	; 151
 c4c:	9f 4f       	sbci	r25, 0xFF	; 255
 c4e:	91 8b       	std	Z+17, r25	; 0x11
 c50:	80 8b       	std	Z+16, r24	; 0x10
 c52:	93 8b       	std	Z+19, r25	; 0x13
 c54:	82 8b       	std	Z+18, r24	; 0x12

    enqueue(newp, &readyQ);
 c56:	66 e0       	ldi	r22, 0x06	; 6
 c58:	71 e0       	ldi	r23, 0x01	; 1
 c5a:	89 81       	ldd	r24, Y+1	; 0x01
 c5c:	9a 81       	ldd	r25, Y+2	; 0x02
 c5e:	0e 94 56 05 	call	0xaac	; 0xaac <enqueue>
    ENABLE();
 c62:	78 94       	sei
}
 c64:	0f 90       	pop	r0
 c66:	0f 90       	pop	r0
 c68:	df 91       	pop	r29
 c6a:	cf 91       	pop	r28
 c6c:	1f 91       	pop	r17
 c6e:	0f 91       	pop	r16
 c70:	ff 90       	pop	r15
 c72:	ef 90       	pop	r14
 c74:	08 95       	ret

00000c76 <yield>:

void yield(void) {

	enqueue(current, &readyQ);
 c76:	66 e0       	ldi	r22, 0x06	; 6
 c78:	71 e0       	ldi	r23, 0x01	; 1
 c7a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 c7e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 c82:	0e 94 56 05 	call	0xaac	; 0xaac <enqueue>
	dispatch(dequeue(&readyQ));
 c86:	86 e0       	ldi	r24, 0x06	; 6
 c88:	91 e0       	ldi	r25, 0x01	; 1
 c8a:	0e 94 6d 05 	call	0xada	; 0xada <dequeue>
 c8e:	0e 94 80 05 	call	0xb00	; 0xb00 <dispatch>
 c92:	08 95       	ret

00000c94 <__vector_7>:
	initClockInterrupt();
	
    initialized = 1;
}

ISR(TIMER1_COMPA_vect){
 c94:	1f 92       	push	r1
 c96:	0f 92       	push	r0
 c98:	0f b6       	in	r0, 0x3f	; 63
 c9a:	0f 92       	push	r0
 c9c:	11 24       	eor	r1, r1
 c9e:	2f 93       	push	r18
 ca0:	3f 93       	push	r19
 ca2:	4f 93       	push	r20
 ca4:	5f 93       	push	r21
 ca6:	6f 93       	push	r22
 ca8:	7f 93       	push	r23
 caa:	8f 93       	push	r24
 cac:	9f 93       	push	r25
 cae:	af 93       	push	r26
 cb0:	bf 93       	push	r27
 cb2:	ef 93       	push	r30
 cb4:	ff 93       	push	r31
	
	interruptCounter++;
 cb6:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <interruptCounter>
 cba:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <interruptCounter+0x1>
 cbe:	01 96       	adiw	r24, 0x01	; 1
 cc0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <interruptCounter+0x1>
 cc4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <interruptCounter>
	
    yield();
 cc8:	0e 94 3b 06 	call	0xc76	; 0xc76 <yield>
}
 ccc:	ff 91       	pop	r31
 cce:	ef 91       	pop	r30
 cd0:	bf 91       	pop	r27
 cd2:	af 91       	pop	r26
 cd4:	9f 91       	pop	r25
 cd6:	8f 91       	pop	r24
 cd8:	7f 91       	pop	r23
 cda:	6f 91       	pop	r22
 cdc:	5f 91       	pop	r21
 cde:	4f 91       	pop	r20
 ce0:	3f 91       	pop	r19
 ce2:	2f 91       	pop	r18
 ce4:	0f 90       	pop	r0
 ce6:	0f be       	out	0x3f, r0	; 63
 ce8:	0f 90       	pop	r0
 cea:	1f 90       	pop	r1
 cec:	18 95       	reti

00000cee <__divmodhi4>:
 cee:	97 fb       	bst	r25, 7
 cf0:	07 2e       	mov	r0, r23
 cf2:	16 f4       	brtc	.+4      	; 0xcf8 <__divmodhi4+0xa>
 cf4:	00 94       	com	r0
 cf6:	07 d0       	rcall	.+14     	; 0xd06 <__divmodhi4_neg1>
 cf8:	77 fd       	sbrc	r23, 7
 cfa:	09 d0       	rcall	.+18     	; 0xd0e <__divmodhi4_neg2>
 cfc:	0e 94 b0 06 	call	0xd60	; 0xd60 <__udivmodhi4>
 d00:	07 fc       	sbrc	r0, 7
 d02:	05 d0       	rcall	.+10     	; 0xd0e <__divmodhi4_neg2>
 d04:	3e f4       	brtc	.+14     	; 0xd14 <__divmodhi4_exit>

00000d06 <__divmodhi4_neg1>:
 d06:	90 95       	com	r25
 d08:	81 95       	neg	r24
 d0a:	9f 4f       	sbci	r25, 0xFF	; 255
 d0c:	08 95       	ret

00000d0e <__divmodhi4_neg2>:
 d0e:	70 95       	com	r23
 d10:	61 95       	neg	r22
 d12:	7f 4f       	sbci	r23, 0xFF	; 255

00000d14 <__divmodhi4_exit>:
 d14:	08 95       	ret

00000d16 <__divmodsi4>:
 d16:	05 2e       	mov	r0, r21
 d18:	97 fb       	bst	r25, 7
 d1a:	1e f4       	brtc	.+6      	; 0xd22 <__divmodsi4+0xc>
 d1c:	00 94       	com	r0
 d1e:	0e 94 a2 06 	call	0xd44	; 0xd44 <__negsi2>
 d22:	57 fd       	sbrc	r21, 7
 d24:	07 d0       	rcall	.+14     	; 0xd34 <__divmodsi4_neg2>
 d26:	0e 94 c4 06 	call	0xd88	; 0xd88 <__udivmodsi4>
 d2a:	07 fc       	sbrc	r0, 7
 d2c:	03 d0       	rcall	.+6      	; 0xd34 <__divmodsi4_neg2>
 d2e:	4e f4       	brtc	.+18     	; 0xd42 <__divmodsi4_exit>
 d30:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <__negsi2>

00000d34 <__divmodsi4_neg2>:
 d34:	50 95       	com	r21
 d36:	40 95       	com	r20
 d38:	30 95       	com	r19
 d3a:	21 95       	neg	r18
 d3c:	3f 4f       	sbci	r19, 0xFF	; 255
 d3e:	4f 4f       	sbci	r20, 0xFF	; 255
 d40:	5f 4f       	sbci	r21, 0xFF	; 255

00000d42 <__divmodsi4_exit>:
 d42:	08 95       	ret

00000d44 <__negsi2>:
 d44:	90 95       	com	r25
 d46:	80 95       	com	r24
 d48:	70 95       	com	r23
 d4a:	61 95       	neg	r22
 d4c:	7f 4f       	sbci	r23, 0xFF	; 255
 d4e:	8f 4f       	sbci	r24, 0xFF	; 255
 d50:	9f 4f       	sbci	r25, 0xFF	; 255
 d52:	08 95       	ret

00000d54 <__tablejump2__>:
 d54:	ee 0f       	add	r30, r30
 d56:	ff 1f       	adc	r31, r31
 d58:	05 90       	lpm	r0, Z+
 d5a:	f4 91       	lpm	r31, Z
 d5c:	e0 2d       	mov	r30, r0
 d5e:	09 94       	ijmp

00000d60 <__udivmodhi4>:
 d60:	aa 1b       	sub	r26, r26
 d62:	bb 1b       	sub	r27, r27
 d64:	51 e1       	ldi	r21, 0x11	; 17
 d66:	07 c0       	rjmp	.+14     	; 0xd76 <__udivmodhi4_ep>

00000d68 <__udivmodhi4_loop>:
 d68:	aa 1f       	adc	r26, r26
 d6a:	bb 1f       	adc	r27, r27
 d6c:	a6 17       	cp	r26, r22
 d6e:	b7 07       	cpc	r27, r23
 d70:	10 f0       	brcs	.+4      	; 0xd76 <__udivmodhi4_ep>
 d72:	a6 1b       	sub	r26, r22
 d74:	b7 0b       	sbc	r27, r23

00000d76 <__udivmodhi4_ep>:
 d76:	88 1f       	adc	r24, r24
 d78:	99 1f       	adc	r25, r25
 d7a:	5a 95       	dec	r21
 d7c:	a9 f7       	brne	.-22     	; 0xd68 <__udivmodhi4_loop>
 d7e:	80 95       	com	r24
 d80:	90 95       	com	r25
 d82:	bc 01       	movw	r22, r24
 d84:	cd 01       	movw	r24, r26
 d86:	08 95       	ret

00000d88 <__udivmodsi4>:
 d88:	a1 e2       	ldi	r26, 0x21	; 33
 d8a:	1a 2e       	mov	r1, r26
 d8c:	aa 1b       	sub	r26, r26
 d8e:	bb 1b       	sub	r27, r27
 d90:	fd 01       	movw	r30, r26
 d92:	0d c0       	rjmp	.+26     	; 0xdae <__udivmodsi4_ep>

00000d94 <__udivmodsi4_loop>:
 d94:	aa 1f       	adc	r26, r26
 d96:	bb 1f       	adc	r27, r27
 d98:	ee 1f       	adc	r30, r30
 d9a:	ff 1f       	adc	r31, r31
 d9c:	a2 17       	cp	r26, r18
 d9e:	b3 07       	cpc	r27, r19
 da0:	e4 07       	cpc	r30, r20
 da2:	f5 07       	cpc	r31, r21
 da4:	20 f0       	brcs	.+8      	; 0xdae <__udivmodsi4_ep>
 da6:	a2 1b       	sub	r26, r18
 da8:	b3 0b       	sbc	r27, r19
 daa:	e4 0b       	sbc	r30, r20
 dac:	f5 0b       	sbc	r31, r21

00000dae <__udivmodsi4_ep>:
 dae:	66 1f       	adc	r22, r22
 db0:	77 1f       	adc	r23, r23
 db2:	88 1f       	adc	r24, r24
 db4:	99 1f       	adc	r25, r25
 db6:	1a 94       	dec	r1
 db8:	69 f7       	brne	.-38     	; 0xd94 <__udivmodsi4_loop>
 dba:	60 95       	com	r22
 dbc:	70 95       	com	r23
 dbe:	80 95       	com	r24
 dc0:	90 95       	com	r25
 dc2:	9b 01       	movw	r18, r22
 dc4:	ac 01       	movw	r20, r24
 dc6:	bd 01       	movw	r22, r26
 dc8:	cf 01       	movw	r24, r30
 dca:	08 95       	ret

00000dcc <setjmp>:
 dcc:	dc 01       	movw	r26, r24
 dce:	2d 92       	st	X+, r2
 dd0:	3d 92       	st	X+, r3
 dd2:	4d 92       	st	X+, r4
 dd4:	5d 92       	st	X+, r5
 dd6:	6d 92       	st	X+, r6
 dd8:	7d 92       	st	X+, r7
 dda:	8d 92       	st	X+, r8
 ddc:	9d 92       	st	X+, r9
 dde:	ad 92       	st	X+, r10
 de0:	bd 92       	st	X+, r11
 de2:	cd 92       	st	X+, r12
 de4:	dd 92       	st	X+, r13
 de6:	ed 92       	st	X+, r14
 de8:	fd 92       	st	X+, r15
 dea:	0d 93       	st	X+, r16
 dec:	1d 93       	st	X+, r17
 dee:	cd 93       	st	X+, r28
 df0:	dd 93       	st	X+, r29
 df2:	ff 91       	pop	r31
 df4:	ef 91       	pop	r30
 df6:	8d b7       	in	r24, 0x3d	; 61
 df8:	8d 93       	st	X+, r24
 dfa:	8e b7       	in	r24, 0x3e	; 62
 dfc:	8d 93       	st	X+, r24
 dfe:	8f b7       	in	r24, 0x3f	; 63
 e00:	8d 93       	st	X+, r24
 e02:	ed 93       	st	X+, r30
 e04:	fd 93       	st	X+, r31
 e06:	88 27       	eor	r24, r24
 e08:	99 27       	eor	r25, r25
 e0a:	09 94       	ijmp

00000e0c <longjmp>:
 e0c:	dc 01       	movw	r26, r24
 e0e:	cb 01       	movw	r24, r22
 e10:	81 30       	cpi	r24, 0x01	; 1
 e12:	91 05       	cpc	r25, r1
 e14:	81 1d       	adc	r24, r1
 e16:	2d 90       	ld	r2, X+
 e18:	3d 90       	ld	r3, X+
 e1a:	4d 90       	ld	r4, X+
 e1c:	5d 90       	ld	r5, X+
 e1e:	6d 90       	ld	r6, X+
 e20:	7d 90       	ld	r7, X+
 e22:	8d 90       	ld	r8, X+
 e24:	9d 90       	ld	r9, X+
 e26:	ad 90       	ld	r10, X+
 e28:	bd 90       	ld	r11, X+
 e2a:	cd 90       	ld	r12, X+
 e2c:	dd 90       	ld	r13, X+
 e2e:	ed 90       	ld	r14, X+
 e30:	fd 90       	ld	r15, X+
 e32:	0d 91       	ld	r16, X+
 e34:	1d 91       	ld	r17, X+
 e36:	cd 91       	ld	r28, X+
 e38:	dd 91       	ld	r29, X+
 e3a:	ed 91       	ld	r30, X+
 e3c:	fd 91       	ld	r31, X+
 e3e:	0d 90       	ld	r0, X+
 e40:	f8 94       	cli
 e42:	fe bf       	out	0x3e, r31	; 62
 e44:	0f be       	out	0x3f, r0	; 63
 e46:	ed bf       	out	0x3d, r30	; 61
 e48:	ed 91       	ld	r30, X+
 e4a:	fd 91       	ld	r31, X+
 e4c:	09 94       	ijmp

00000e4e <_exit>:
 e4e:	f8 94       	cli

00000e50 <__stop_program>:
 e50:	ff cf       	rjmp	.-2      	; 0xe50 <__stop_program>
