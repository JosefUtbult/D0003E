
Labb1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000080c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007b8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000080c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000083c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d8c  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d3  00000000  00000000  00001660  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000054b  00000000  00000000  00001f33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000108  00000000  00000000  00002480  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048e  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c55  00000000  00000000  00002a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000366b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	7c 02       	muls	r23, r28
  5e:	88 02       	muls	r24, r24
  60:	94 02       	muls	r25, r20
  62:	a0 02       	muls	r26, r16
  64:	ac 02       	muls	r26, r28
  66:	b8 02       	muls	r27, r24
  68:	c4 02       	muls	r28, r20
  6a:	d0 02       	muls	r29, r16
  6c:	dc 02       	muls	r29, r28
  6e:	e8 02       	muls	r30, r24

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 8f 03 	call	0x71e	; 0x71e <main>
  80:	0c 94 da 03 	jmp	0x7b4	; 0x7b4 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <isPrime>:
	
	}

}

int isPrime(long i){
  88:	cf 92       	push	r12
  8a:	df 92       	push	r13
  8c:	ef 92       	push	r14
  8e:	ff 92       	push	r15
  90:	cf 93       	push	r28
  92:	df 93       	push	r29
  94:	6b 01       	movw	r12, r22
  96:	7c 01       	movw	r14, r24

	for(int j = 2; j < i; j++ ){
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	c8 16       	cp	r12, r24
  9c:	d1 04       	cpc	r13, r1
  9e:	e1 04       	cpc	r14, r1
  a0:	f1 04       	cpc	r15, r1
  a2:	7c f1       	brlt	.+94     	; 0x102 <isPrime+0x7a>
	
		if(!(i % j)){
  a4:	d7 01       	movw	r26, r14
  a6:	c6 01       	movw	r24, r12
  a8:	81 70       	andi	r24, 0x01	; 1
  aa:	99 27       	eor	r25, r25
  ac:	aa 27       	eor	r26, r26
  ae:	b0 78       	andi	r27, 0x80	; 128
  b0:	bb 23       	and	r27, r27
  b2:	54 f4       	brge	.+20     	; 0xc8 <isPrime+0x40>
  b4:	01 97       	sbiw	r24, 0x01	; 1
  b6:	a1 09       	sbc	r26, r1
  b8:	b1 09       	sbc	r27, r1
  ba:	8e 6f       	ori	r24, 0xFE	; 254
  bc:	9f 6f       	ori	r25, 0xFF	; 255
  be:	af 6f       	ori	r26, 0xFF	; 255
  c0:	bf 6f       	ori	r27, 0xFF	; 255
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	a1 1d       	adc	r26, r1
  c6:	b1 1d       	adc	r27, r1
  c8:	89 2b       	or	r24, r25
  ca:	8a 2b       	or	r24, r26
  cc:	8b 2b       	or	r24, r27
  ce:	e1 f0       	breq	.+56     	; 0x108 <isPrime+0x80>
  d0:	c2 e0       	ldi	r28, 0x02	; 2
  d2:	d0 e0       	ldi	r29, 0x00	; 0
  d4:	08 c0       	rjmp	.+16     	; 0xe6 <isPrime+0x5e>
  d6:	c7 01       	movw	r24, r14
  d8:	b6 01       	movw	r22, r12
  da:	0e 94 93 03 	call	0x726	; 0x726 <__divmodsi4>
  de:	67 2b       	or	r22, r23
  e0:	68 2b       	or	r22, r24
  e2:	69 2b       	or	r22, r25
  e4:	a1 f0       	breq	.+40     	; 0x10e <isPrime+0x86>

}

int isPrime(long i){

	for(int j = 2; j < i; j++ ){
  e6:	21 96       	adiw	r28, 0x01	; 1
  e8:	9e 01       	movw	r18, r28
  ea:	0d 2e       	mov	r0, r29
  ec:	00 0c       	add	r0, r0
  ee:	44 0b       	sbc	r20, r20
  f0:	55 0b       	sbc	r21, r21
  f2:	2c 15       	cp	r18, r12
  f4:	3d 05       	cpc	r19, r13
  f6:	4e 05       	cpc	r20, r14
  f8:	5f 05       	cpc	r21, r15
  fa:	6c f3       	brlt	.-38     	; 0xd6 <isPrime+0x4e>
		
		}
	
	}

	return 1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	08 c0       	rjmp	.+16     	; 0x112 <isPrime+0x8a>
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	05 c0       	rjmp	.+10     	; 0x112 <isPrime+0x8a>

	for(int j = 2; j < i; j++ ){
	
		if(!(i % j)){
		
			return 0;
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <isPrime+0x8a>
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
	
	}

	return 1;

}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	ff 90       	pop	r15
 118:	ef 90       	pop	r14
 11a:	df 90       	pop	r13
 11c:	cf 90       	pop	r12
 11e:	08 95       	ret

00000120 <LCDWritePackage>:
	
	}
	
}

void LCDWritePackage(int offcet, uint16_t pos0, uint16_t pos1, uint16_t pos2, uint16_t pos3){
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17

	if(offcet < 0){
 124:	99 23       	and	r25, r25
 126:	0c f4       	brge	.+2      	; 0x12a <LCDWritePackage+0xa>
 128:	d1 c1       	rjmp	.+930    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		
		return;
		
	}
	else if(offcet < 2){
 12a:	82 30       	cpi	r24, 0x02	; 2
 12c:	91 05       	cpc	r25, r1
 12e:	8c f4       	brge	.+34     	; 0x152 <LCDWritePackage+0x32>
		
		LCDDR0 = LCDDR0 | ((uint32_t)pos0 << (offcet == 1 ? 4 : 0));
 130:	e0 91 ec 00 	lds	r30, 0x00EC	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	09 f0       	breq	.+2      	; 0x13a <LCDWritePackage+0x1a>
 138:	95 c0       	rjmp	.+298    	; 0x264 <LCDWritePackage+0x144>
 13a:	48 c0       	rjmp	.+144    	; 0x1cc <LCDWritePackage+0xac>
		LCDDR5 = LCDDR5 | ((uint32_t)pos1 << (offcet == 1 ? 4 : 0));
		LCDDR10 = LCDDR10 | ((uint32_t)pos2 << (offcet == 1 ? 4 : 0));
		LCDDR15 = LCDDR15 | ((uint32_t)pos3 << (offcet == 1 ? 4 : 0));
 13c:	04 c0       	rjmp	.+8      	; 0x146 <LCDWritePackage+0x26>
 13e:	00 0f       	add	r16, r16
 140:	11 1f       	adc	r17, r17
 142:	22 1f       	adc	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	8a 95       	dec	r24
 148:	d2 f7       	brpl	.-12     	; 0x13e <LCDWritePackage+0x1e>
 14a:	09 2b       	or	r16, r25
 14c:	00 93 fb 00 	sts	0x00FB, r16	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7e00fb>
 150:	bd c1       	rjmp	.+890    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>

	}
	
	else if(offcet < 4){
 152:	84 30       	cpi	r24, 0x04	; 4
 154:	91 05       	cpc	r25, r1
 156:	8c f4       	brge	.+34     	; 0x17a <LCDWritePackage+0x5a>
		
		LCDDR1 = LCDDR1 | ((uint32_t)pos0 << (offcet == 3 ? 4 : 0));
 158:	e0 91 ed 00 	lds	r30, 0x00ED	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
 15c:	03 97       	sbiw	r24, 0x03	; 3
 15e:	09 f0       	breq	.+2      	; 0x162 <LCDWritePackage+0x42>
 160:	95 c0       	rjmp	.+298    	; 0x28c <LCDWritePackage+0x16c>
 162:	a8 c0       	rjmp	.+336    	; 0x2b4 <LCDWritePackage+0x194>
		LCDDR6 = LCDDR6 | ((uint32_t)pos1 << (offcet == 3 ? 4 : 0));
		LCDDR11 = LCDDR11 | ((uint32_t)pos2 << (offcet == 3 ? 4 : 0));
		LCDDR16 = LCDDR16 | ((uint32_t)pos3 << (offcet == 3 ? 4 : 0));
 164:	04 c0       	rjmp	.+8      	; 0x16e <LCDWritePackage+0x4e>
 166:	00 0f       	add	r16, r16
 168:	11 1f       	adc	r17, r17
 16a:	22 1f       	adc	r18, r18
 16c:	33 1f       	adc	r19, r19
 16e:	8a 95       	dec	r24
 170:	d2 f7       	brpl	.-12     	; 0x166 <LCDWritePackage+0x46>
 172:	09 2b       	or	r16, r25
 174:	00 93 fc 00 	sts	0x00FC, r16	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7e00fc>
 178:	a9 c1       	rjmp	.+850    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>

	}
	
	else if(offcet < 6){
 17a:	86 30       	cpi	r24, 0x06	; 6
 17c:	91 05       	cpc	r25, r1
 17e:	8c f4       	brge	.+34     	; 0x1a2 <LCDWritePackage+0x82>
		
		LCDDR2 = LCDDR2 | ((uint32_t)pos0 << (offcet == 5 ? 4 : 0));
 180:	e0 91 ee 00 	lds	r30, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
 184:	05 97       	sbiw	r24, 0x05	; 5
 186:	09 f0       	breq	.+2      	; 0x18a <LCDWritePackage+0x6a>
 188:	2d c1       	rjmp	.+602    	; 0x3e4 <LCDWritePackage+0x2c4>
 18a:	e0 c0       	rjmp	.+448    	; 0x34c <LCDWritePackage+0x22c>
		LCDDR7 = LCDDR7 | ((uint32_t)pos1 << (offcet == 5 ? 4 : 0));
		LCDDR12 = LCDDR12 | ((uint32_t)pos2 << (offcet == 5 ? 4 : 0));
		LCDDR17 = LCDDR17 | ((uint32_t)pos3 << (offcet == 5 ? 4 : 0));
 18c:	04 c0       	rjmp	.+8      	; 0x196 <LCDWritePackage+0x76>
 18e:	00 0f       	add	r16, r16
 190:	11 1f       	adc	r17, r17
 192:	22 1f       	adc	r18, r18
 194:	33 1f       	adc	r19, r19
 196:	8a 95       	dec	r24
 198:	d2 f7       	brpl	.-12     	; 0x18e <LCDWritePackage+0x6e>
 19a:	09 2b       	or	r16, r25
 19c:	00 93 fd 00 	sts	0x00FD, r16	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7e00fd>
 1a0:	95 c1       	rjmp	.+810    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>

	}
	
	else if(offcet < 8){
 1a2:	88 30       	cpi	r24, 0x08	; 8
 1a4:	91 05       	cpc	r25, r1
 1a6:	0c f0       	brlt	.+2      	; 0x1aa <LCDWritePackage+0x8a>
 1a8:	91 c1       	rjmp	.+802    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		
		LCDDR3 = LCDDR3 | ((uint32_t)pos0 << (offcet == 7 ? 4 : 0));
 1aa:	e0 91 ef 00 	lds	r30, 0x00EF	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
 1ae:	07 97       	sbiw	r24, 0x07	; 7
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <LCDWritePackage+0x94>
 1b2:	2c c1       	rjmp	.+600    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 1b4:	3f c1       	rjmp	.+638    	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		LCDDR7 = LCDDR7 | ((uint32_t)pos1 << (offcet == 7 ? 4 : 0));
		LCDDR13 = LCDDR13 | ((uint32_t)pos2 << (offcet == 7 ? 4 : 0));
		LCDDR18 = LCDDR18 | ((uint32_t)pos3 << (offcet == 7 ? 4 : 0));
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <LCDWritePackage+0xa0>
 1b8:	00 0f       	add	r16, r16
 1ba:	11 1f       	adc	r17, r17
 1bc:	22 1f       	adc	r18, r18
 1be:	33 1f       	adc	r19, r19
 1c0:	8a 95       	dec	r24
 1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <LCDWritePackage+0x98>
 1c4:	09 2b       	or	r16, r25
 1c6:	00 93 fe 00 	sts	0x00FE, r16	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7e00fe>
 1ca:	80 c1       	rjmp	.+768    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
		return;
		
	}
	else if(offcet < 2){
		
		LCDDR0 = LCDDR0 | ((uint32_t)pos0 << (offcet == 1 ? 4 : 0));
 1cc:	cb 01       	movw	r24, r22
 1ce:	a0 e0       	ldi	r26, 0x00	; 0
 1d0:	b0 e0       	ldi	r27, 0x00	; 0
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	aa 1f       	adc	r26, r26
 1d8:	bb 1f       	adc	r27, r27
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	aa 1f       	adc	r26, r26
 1e0:	bb 1f       	adc	r27, r27
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	aa 1f       	adc	r26, r26
 1e8:	bb 1f       	adc	r27, r27
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	aa 1f       	adc	r26, r26
 1f0:	bb 1f       	adc	r27, r27
 1f2:	8e 2b       	or	r24, r30
 1f4:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		LCDDR5 = LCDDR5 | ((uint32_t)pos1 << (offcet == 1 ? 4 : 0));
 1f8:	e1 ef       	ldi	r30, 0xF1	; 241
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	44 0f       	add	r20, r20
 204:	55 1f       	adc	r21, r21
 206:	66 1f       	adc	r22, r22
 208:	77 1f       	adc	r23, r23
 20a:	44 0f       	add	r20, r20
 20c:	55 1f       	adc	r21, r21
 20e:	66 1f       	adc	r22, r22
 210:	77 1f       	adc	r23, r23
 212:	44 0f       	add	r20, r20
 214:	55 1f       	adc	r21, r21
 216:	66 1f       	adc	r22, r22
 218:	77 1f       	adc	r23, r23
 21a:	44 0f       	add	r20, r20
 21c:	55 1f       	adc	r21, r21
 21e:	66 1f       	adc	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	48 2b       	or	r20, r24
 224:	40 83       	st	Z, r20
		LCDDR10 = LCDDR10 | ((uint32_t)pos2 << (offcet == 1 ? 4 : 0));
 226:	e6 ef       	ldi	r30, 0xF6	; 246
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	80 81       	ld	r24, Z
 22c:	a9 01       	movw	r20, r18
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	44 0f       	add	r20, r20
 234:	55 1f       	adc	r21, r21
 236:	66 1f       	adc	r22, r22
 238:	77 1f       	adc	r23, r23
 23a:	44 0f       	add	r20, r20
 23c:	55 1f       	adc	r21, r21
 23e:	66 1f       	adc	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	44 0f       	add	r20, r20
 244:	55 1f       	adc	r21, r21
 246:	66 1f       	adc	r22, r22
 248:	77 1f       	adc	r23, r23
 24a:	44 0f       	add	r20, r20
 24c:	55 1f       	adc	r21, r21
 24e:	66 1f       	adc	r22, r22
 250:	77 1f       	adc	r23, r23
 252:	28 2f       	mov	r18, r24
 254:	24 2b       	or	r18, r20
 256:	20 83       	st	Z, r18
		LCDDR15 = LCDDR15 | ((uint32_t)pos3 << (offcet == 1 ? 4 : 0));
 258:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7e00fb>
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	84 e0       	ldi	r24, 0x04	; 4
 262:	6c cf       	rjmp	.-296    	; 0x13c <LCDWritePackage+0x1c>
		return;
		
	}
	else if(offcet < 2){
		
		LCDDR0 = LCDDR0 | ((uint32_t)pos0 << (offcet == 1 ? 4 : 0));
 264:	8e 2f       	mov	r24, r30
 266:	86 2b       	or	r24, r22
 268:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		LCDDR5 = LCDDR5 | ((uint32_t)pos1 << (offcet == 1 ? 4 : 0));
 26c:	e1 ef       	ldi	r30, 0xF1	; 241
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	80 81       	ld	r24, Z
 272:	48 2b       	or	r20, r24
 274:	40 83       	st	Z, r20
		LCDDR10 = LCDDR10 | ((uint32_t)pos2 << (offcet == 1 ? 4 : 0));
 276:	e6 ef       	ldi	r30, 0xF6	; 246
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	28 2b       	or	r18, r24
 27e:	20 83       	st	Z, r18
		LCDDR15 = LCDDR15 | ((uint32_t)pos3 << (offcet == 1 ? 4 : 0));
 280:	90 91 fb 00 	lds	r25, 0x00FB	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7e00fb>
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	80 e0       	ldi	r24, 0x00	; 0
 28a:	58 cf       	rjmp	.-336    	; 0x13c <LCDWritePackage+0x1c>

	}
	
	else if(offcet < 4){
		
		LCDDR1 = LCDDR1 | ((uint32_t)pos0 << (offcet == 3 ? 4 : 0));
 28c:	8e 2f       	mov	r24, r30
 28e:	86 2b       	or	r24, r22
 290:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		LCDDR6 = LCDDR6 | ((uint32_t)pos1 << (offcet == 3 ? 4 : 0));
 294:	e2 ef       	ldi	r30, 0xF2	; 242
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	48 2b       	or	r20, r24
 29c:	40 83       	st	Z, r20
		LCDDR11 = LCDDR11 | ((uint32_t)pos2 << (offcet == 3 ? 4 : 0));
 29e:	e7 ef       	ldi	r30, 0xF7	; 247
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	28 2b       	or	r18, r24
 2a6:	20 83       	st	Z, r18
		LCDDR16 = LCDDR16 | ((uint32_t)pos3 << (offcet == 3 ? 4 : 0));
 2a8:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7e00fc>
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	58 cf       	rjmp	.-336    	; 0x164 <LCDWritePackage+0x44>

	}
	
	else if(offcet < 4){
		
		LCDDR1 = LCDDR1 | ((uint32_t)pos0 << (offcet == 3 ? 4 : 0));
 2b4:	cb 01       	movw	r24, r22
 2b6:	a0 e0       	ldi	r26, 0x00	; 0
 2b8:	b0 e0       	ldi	r27, 0x00	; 0
 2ba:	88 0f       	add	r24, r24
 2bc:	99 1f       	adc	r25, r25
 2be:	aa 1f       	adc	r26, r26
 2c0:	bb 1f       	adc	r27, r27
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	aa 1f       	adc	r26, r26
 2c8:	bb 1f       	adc	r27, r27
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	aa 1f       	adc	r26, r26
 2d0:	bb 1f       	adc	r27, r27
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	aa 1f       	adc	r26, r26
 2d8:	bb 1f       	adc	r27, r27
 2da:	8e 2b       	or	r24, r30
 2dc:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		LCDDR6 = LCDDR6 | ((uint32_t)pos1 << (offcet == 3 ? 4 : 0));
 2e0:	e2 ef       	ldi	r30, 0xF2	; 242
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	44 0f       	add	r20, r20
 2ec:	55 1f       	adc	r21, r21
 2ee:	66 1f       	adc	r22, r22
 2f0:	77 1f       	adc	r23, r23
 2f2:	44 0f       	add	r20, r20
 2f4:	55 1f       	adc	r21, r21
 2f6:	66 1f       	adc	r22, r22
 2f8:	77 1f       	adc	r23, r23
 2fa:	44 0f       	add	r20, r20
 2fc:	55 1f       	adc	r21, r21
 2fe:	66 1f       	adc	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	44 0f       	add	r20, r20
 304:	55 1f       	adc	r21, r21
 306:	66 1f       	adc	r22, r22
 308:	77 1f       	adc	r23, r23
 30a:	48 2b       	or	r20, r24
 30c:	40 83       	st	Z, r20
		LCDDR11 = LCDDR11 | ((uint32_t)pos2 << (offcet == 3 ? 4 : 0));
 30e:	e7 ef       	ldi	r30, 0xF7	; 247
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	a9 01       	movw	r20, r18
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	44 0f       	add	r20, r20
 31c:	55 1f       	adc	r21, r21
 31e:	66 1f       	adc	r22, r22
 320:	77 1f       	adc	r23, r23
 322:	44 0f       	add	r20, r20
 324:	55 1f       	adc	r21, r21
 326:	66 1f       	adc	r22, r22
 328:	77 1f       	adc	r23, r23
 32a:	44 0f       	add	r20, r20
 32c:	55 1f       	adc	r21, r21
 32e:	66 1f       	adc	r22, r22
 330:	77 1f       	adc	r23, r23
 332:	44 0f       	add	r20, r20
 334:	55 1f       	adc	r21, r21
 336:	66 1f       	adc	r22, r22
 338:	77 1f       	adc	r23, r23
 33a:	28 2f       	mov	r18, r24
 33c:	24 2b       	or	r18, r20
 33e:	20 83       	st	Z, r18
		LCDDR16 = LCDDR16 | ((uint32_t)pos3 << (offcet == 3 ? 4 : 0));
 340:	90 91 fc 00 	lds	r25, 0x00FC	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7e00fc>
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	84 e0       	ldi	r24, 0x04	; 4
 34a:	0c cf       	rjmp	.-488    	; 0x164 <LCDWritePackage+0x44>

	}
	
	else if(offcet < 6){
		
		LCDDR2 = LCDDR2 | ((uint32_t)pos0 << (offcet == 5 ? 4 : 0));
 34c:	cb 01       	movw	r24, r22
 34e:	a0 e0       	ldi	r26, 0x00	; 0
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	aa 1f       	adc	r26, r26
 358:	bb 1f       	adc	r27, r27
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	aa 1f       	adc	r26, r26
 360:	bb 1f       	adc	r27, r27
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	aa 1f       	adc	r26, r26
 368:	bb 1f       	adc	r27, r27
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	aa 1f       	adc	r26, r26
 370:	bb 1f       	adc	r27, r27
 372:	8e 2b       	or	r24, r30
 374:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		LCDDR7 = LCDDR7 | ((uint32_t)pos1 << (offcet == 5 ? 4 : 0));
 378:	e3 ef       	ldi	r30, 0xF3	; 243
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	80 81       	ld	r24, Z
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	44 0f       	add	r20, r20
 384:	55 1f       	adc	r21, r21
 386:	66 1f       	adc	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	44 0f       	add	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	66 1f       	adc	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	44 0f       	add	r20, r20
 394:	55 1f       	adc	r21, r21
 396:	66 1f       	adc	r22, r22
 398:	77 1f       	adc	r23, r23
 39a:	44 0f       	add	r20, r20
 39c:	55 1f       	adc	r21, r21
 39e:	66 1f       	adc	r22, r22
 3a0:	77 1f       	adc	r23, r23
 3a2:	48 2b       	or	r20, r24
 3a4:	40 83       	st	Z, r20
		LCDDR12 = LCDDR12 | ((uint32_t)pos2 << (offcet == 5 ? 4 : 0));
 3a6:	e8 ef       	ldi	r30, 0xF8	; 248
 3a8:	f0 e0       	ldi	r31, 0x00	; 0
 3aa:	80 81       	ld	r24, Z
 3ac:	a9 01       	movw	r20, r18
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	44 0f       	add	r20, r20
 3b4:	55 1f       	adc	r21, r21
 3b6:	66 1f       	adc	r22, r22
 3b8:	77 1f       	adc	r23, r23
 3ba:	44 0f       	add	r20, r20
 3bc:	55 1f       	adc	r21, r21
 3be:	66 1f       	adc	r22, r22
 3c0:	77 1f       	adc	r23, r23
 3c2:	44 0f       	add	r20, r20
 3c4:	55 1f       	adc	r21, r21
 3c6:	66 1f       	adc	r22, r22
 3c8:	77 1f       	adc	r23, r23
 3ca:	44 0f       	add	r20, r20
 3cc:	55 1f       	adc	r21, r21
 3ce:	66 1f       	adc	r22, r22
 3d0:	77 1f       	adc	r23, r23
 3d2:	28 2f       	mov	r18, r24
 3d4:	24 2b       	or	r18, r20
 3d6:	20 83       	st	Z, r18
		LCDDR17 = LCDDR17 | ((uint32_t)pos3 << (offcet == 5 ? 4 : 0));
 3d8:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7e00fd>
 3dc:	20 e0       	ldi	r18, 0x00	; 0
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	d4 ce       	rjmp	.-600    	; 0x18c <LCDWritePackage+0x6c>

	}
	
	else if(offcet < 6){
		
		LCDDR2 = LCDDR2 | ((uint32_t)pos0 << (offcet == 5 ? 4 : 0));
 3e4:	8e 2f       	mov	r24, r30
 3e6:	86 2b       	or	r24, r22
 3e8:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
		LCDDR7 = LCDDR7 | ((uint32_t)pos1 << (offcet == 5 ? 4 : 0));
 3ec:	e3 ef       	ldi	r30, 0xF3	; 243
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	48 2b       	or	r20, r24
 3f4:	40 83       	st	Z, r20
		LCDDR12 = LCDDR12 | ((uint32_t)pos2 << (offcet == 5 ? 4 : 0));
 3f6:	e8 ef       	ldi	r30, 0xF8	; 248
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	28 2b       	or	r18, r24
 3fe:	20 83       	st	Z, r18
		LCDDR17 = LCDDR17 | ((uint32_t)pos3 << (offcet == 5 ? 4 : 0));
 400:	90 91 fd 00 	lds	r25, 0x00FD	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7e00fd>
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	c0 ce       	rjmp	.-640    	; 0x18c <LCDWritePackage+0x6c>

	}
	
	else if(offcet < 8){
		
		LCDDR3 = LCDDR3 | ((uint32_t)pos0 << (offcet == 7 ? 4 : 0));
 40c:	8e 2f       	mov	r24, r30
 40e:	86 2b       	or	r24, r22
 410:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		LCDDR7 = LCDDR7 | ((uint32_t)pos1 << (offcet == 7 ? 4 : 0));
 414:	e3 ef       	ldi	r30, 0xF3	; 243
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	48 2b       	or	r20, r24
 41c:	40 83       	st	Z, r20
		LCDDR13 = LCDDR13 | ((uint32_t)pos2 << (offcet == 7 ? 4 : 0));
 41e:	e9 ef       	ldi	r30, 0xF9	; 249
 420:	f0 e0       	ldi	r31, 0x00	; 0
 422:	80 81       	ld	r24, Z
 424:	28 2b       	or	r18, r24
 426:	20 83       	st	Z, r18
		LCDDR18 = LCDDR18 | ((uint32_t)pos3 << (offcet == 7 ? 4 : 0));
 428:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7e00fe>
 42c:	20 e0       	ldi	r18, 0x00	; 0
 42e:	30 e0       	ldi	r19, 0x00	; 0
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	c1 ce       	rjmp	.-638    	; 0x1b6 <LCDWritePackage+0x96>

	}
	
	else if(offcet < 8){
		
		LCDDR3 = LCDDR3 | ((uint32_t)pos0 << (offcet == 7 ? 4 : 0));
 434:	cb 01       	movw	r24, r22
 436:	a0 e0       	ldi	r26, 0x00	; 0
 438:	b0 e0       	ldi	r27, 0x00	; 0
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	aa 1f       	adc	r26, r26
 440:	bb 1f       	adc	r27, r27
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	aa 1f       	adc	r26, r26
 448:	bb 1f       	adc	r27, r27
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	aa 1f       	adc	r26, r26
 450:	bb 1f       	adc	r27, r27
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	aa 1f       	adc	r26, r26
 458:	bb 1f       	adc	r27, r27
 45a:	8e 2b       	or	r24, r30
 45c:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		LCDDR7 = LCDDR7 | ((uint32_t)pos1 << (offcet == 7 ? 4 : 0));
 460:	e3 ef       	ldi	r30, 0xF3	; 243
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	60 e0       	ldi	r22, 0x00	; 0
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	44 0f       	add	r20, r20
 46c:	55 1f       	adc	r21, r21
 46e:	66 1f       	adc	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	44 0f       	add	r20, r20
 474:	55 1f       	adc	r21, r21
 476:	66 1f       	adc	r22, r22
 478:	77 1f       	adc	r23, r23
 47a:	44 0f       	add	r20, r20
 47c:	55 1f       	adc	r21, r21
 47e:	66 1f       	adc	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	44 0f       	add	r20, r20
 484:	55 1f       	adc	r21, r21
 486:	66 1f       	adc	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	48 2b       	or	r20, r24
 48c:	40 83       	st	Z, r20
		LCDDR13 = LCDDR13 | ((uint32_t)pos2 << (offcet == 7 ? 4 : 0));
 48e:	e9 ef       	ldi	r30, 0xF9	; 249
 490:	f0 e0       	ldi	r31, 0x00	; 0
 492:	80 81       	ld	r24, Z
 494:	a9 01       	movw	r20, r18
 496:	60 e0       	ldi	r22, 0x00	; 0
 498:	70 e0       	ldi	r23, 0x00	; 0
 49a:	44 0f       	add	r20, r20
 49c:	55 1f       	adc	r21, r21
 49e:	66 1f       	adc	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	44 0f       	add	r20, r20
 4a4:	55 1f       	adc	r21, r21
 4a6:	66 1f       	adc	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	44 0f       	add	r20, r20
 4ac:	55 1f       	adc	r21, r21
 4ae:	66 1f       	adc	r22, r22
 4b0:	77 1f       	adc	r23, r23
 4b2:	44 0f       	add	r20, r20
 4b4:	55 1f       	adc	r21, r21
 4b6:	66 1f       	adc	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	28 2f       	mov	r18, r24
 4bc:	24 2b       	or	r18, r20
 4be:	20 83       	st	Z, r18
		LCDDR18 = LCDDR18 | ((uint32_t)pos3 << (offcet == 7 ? 4 : 0));
 4c0:	90 91 fe 00 	lds	r25, 0x00FE	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7e00fe>
 4c4:	20 e0       	ldi	r18, 0x00	; 0
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	84 e0       	ldi	r24, 0x04	; 4
 4ca:	75 ce       	rjmp	.-790    	; 0x1b6 <LCDWritePackage+0x96>

	}

	
}
 4cc:	1f 91       	pop	r17
 4ce:	0f 91       	pop	r16
 4d0:	08 95       	ret

000004d2 <writeChar>:
		i = i / 10;
	}

}

void writeChar(char ch, int pos){
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
	
	if (pos >= 0 && pos <= 5){
 4d6:	66 30       	cpi	r22, 0x06	; 6
 4d8:	71 05       	cpc	r23, r1
 4da:	08 f0       	brcs	.+2      	; 0x4de <writeChar+0xc>
 4dc:	90 c0       	rjmp	.+288    	; 0x5fe <__stack+0xff>
 4de:	db 01       	movw	r26, r22
	
			switch (ch){
 4e0:	48 2f       	mov	r20, r24
 4e2:	50 e0       	ldi	r21, 0x00	; 0
 4e4:	fa 01       	movw	r30, r20
 4e6:	f0 97       	sbiw	r30, 0x30	; 48
 4e8:	ea 30       	cpi	r30, 0x0A	; 10
 4ea:	f1 05       	cpc	r31, r1
 4ec:	08 f0       	brcs	.+2      	; 0x4f0 <writeChar+0x1e>
 4ee:	7c c0       	rjmp	.+248    	; 0x5e8 <__stack+0xe9>
 4f0:	e2 5d       	subi	r30, 0xD2	; 210
 4f2:	ff 4f       	sbci	r31, 0xFF	; 255
 4f4:	0c 94 b2 03 	jmp	0x764	; 0x764 <__tablejump2__>
				
				case '0':
				
				LCDWritePackage(pos, 0b1001, 0b0101, 0b0101, 0b0101);
 4f8:	05 e0       	ldi	r16, 0x05	; 5
 4fa:	10 e0       	ldi	r17, 0x00	; 0
 4fc:	25 e0       	ldi	r18, 0x05	; 5
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	45 e0       	ldi	r20, 0x05	; 5
 502:	50 e0       	ldi	r21, 0x00	; 0
 504:	69 e0       	ldi	r22, 0x09	; 9
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	cd 01       	movw	r24, r26
 50a:	0e 94 90 00 	call	0x120	; 0x120 <LCDWritePackage>
				
				break;
 50e:	77 c0       	rjmp	.+238    	; 0x5fe <__stack+0xff>
				
				case '1':
				
				LCDWritePackage(pos, 0b0000, 0b0001, 0b0001, 0b0000);
 510:	00 e0       	ldi	r16, 0x00	; 0
 512:	10 e0       	ldi	r17, 0x00	; 0
 514:	21 e0       	ldi	r18, 0x01	; 1
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	50 e0       	ldi	r21, 0x00	; 0
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	70 e0       	ldi	r23, 0x00	; 0
 520:	cd 01       	movw	r24, r26
 522:	0e 94 90 00 	call	0x120	; 0x120 <LCDWritePackage>
				
				break;
 526:	6b c0       	rjmp	.+214    	; 0x5fe <__stack+0xff>
				
				case '2':
				
				LCDWritePackage(pos, 0b0001, 0b0001, 0b1000, 0b0101);
 528:	05 e0       	ldi	r16, 0x05	; 5
 52a:	10 e0       	ldi	r17, 0x00	; 0
 52c:	28 e0       	ldi	r18, 0x08	; 8
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	41 e0       	ldi	r20, 0x01	; 1
 532:	50 e0       	ldi	r21, 0x00	; 0
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	cd 01       	movw	r24, r26
 53a:	0e 94 90 00 	call	0x120	; 0x120 <LCDWritePackage>
				
				break;
 53e:	5f c0       	rjmp	.+190    	; 0x5fe <__stack+0xff>
				
				case '3':
				
				LCDWritePackage(pos, 0b0001, 0b0001, 0b1011, 0b0001);
 540:	01 e0       	ldi	r16, 0x01	; 1
 542:	10 e0       	ldi	r17, 0x00	; 0
 544:	2b e0       	ldi	r18, 0x0B	; 11
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	41 e0       	ldi	r20, 0x01	; 1
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	61 e0       	ldi	r22, 0x01	; 1
 54e:	70 e0       	ldi	r23, 0x00	; 0
 550:	cd 01       	movw	r24, r26
 552:	0e 94 90 00 	call	0x120	; 0x120 <LCDWritePackage>
				
				break;
 556:	53 c0       	rjmp	.+166    	; 0x5fe <__stack+0xff>
				
				case '4':
				
				LCDWritePackage(pos, 0b0000, 0b0101, 0b1011, 0b0000);
 558:	00 e0       	ldi	r16, 0x00	; 0
 55a:	10 e0       	ldi	r17, 0x00	; 0
 55c:	2b e0       	ldi	r18, 0x0B	; 11
 55e:	30 e0       	ldi	r19, 0x00	; 0
 560:	45 e0       	ldi	r20, 0x05	; 5
 562:	50 e0       	ldi	r21, 0x00	; 0
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	cd 01       	movw	r24, r26
 56a:	0e 94 90 00 	call	0x120	; 0x120 <LCDWritePackage>
				
				break;
 56e:	47 c0       	rjmp	.+142    	; 0x5fe <__stack+0xff>
				
				case '5':
				
				LCDWritePackage(pos, 0b0001, 0b0100, 0b1011, 0b0001);
 570:	01 e0       	ldi	r16, 0x01	; 1
 572:	10 e0       	ldi	r17, 0x00	; 0
 574:	2b e0       	ldi	r18, 0x0B	; 11
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	44 e0       	ldi	r20, 0x04	; 4
 57a:	50 e0       	ldi	r21, 0x00	; 0
 57c:	61 e0       	ldi	r22, 0x01	; 1
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	cd 01       	movw	r24, r26
 582:	0e 94 90 00 	call	0x120	; 0x120 <LCDWritePackage>
				
				break;
 586:	3b c0       	rjmp	.+118    	; 0x5fe <__stack+0xff>
				
				case '6':
				
				LCDWritePackage(pos, 0b0001, 0b0100, 0b1111, 0b0001);
 588:	01 e0       	ldi	r16, 0x01	; 1
 58a:	10 e0       	ldi	r17, 0x00	; 0
 58c:	2f e0       	ldi	r18, 0x0F	; 15
 58e:	30 e0       	ldi	r19, 0x00	; 0
 590:	44 e0       	ldi	r20, 0x04	; 4
 592:	50 e0       	ldi	r21, 0x00	; 0
 594:	61 e0       	ldi	r22, 0x01	; 1
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	cd 01       	movw	r24, r26
 59a:	0e 94 90 00 	call	0x120	; 0x120 <LCDWritePackage>
				
				break;
 59e:	2f c0       	rjmp	.+94     	; 0x5fe <__stack+0xff>
				
				case '7':
				
				LCDWritePackage(pos, 0b1001, 0b0000, 0b0000, 0b0100);
 5a0:	04 e0       	ldi	r16, 0x04	; 4
 5a2:	10 e0       	ldi	r17, 0x00	; 0
 5a4:	20 e0       	ldi	r18, 0x00	; 0
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	40 e0       	ldi	r20, 0x00	; 0
 5aa:	50 e0       	ldi	r21, 0x00	; 0
 5ac:	69 e0       	ldi	r22, 0x09	; 9
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	cd 01       	movw	r24, r26
 5b2:	0e 94 90 00 	call	0x120	; 0x120 <LCDWritePackage>
				
				break;
 5b6:	23 c0       	rjmp	.+70     	; 0x5fe <__stack+0xff>
				
				case '8':
				
				LCDWritePackage(pos, 0b0001, 0b0101, 0b1111, 0b0001);
 5b8:	01 e0       	ldi	r16, 0x01	; 1
 5ba:	10 e0       	ldi	r17, 0x00	; 0
 5bc:	2f e0       	ldi	r18, 0x0F	; 15
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	45 e0       	ldi	r20, 0x05	; 5
 5c2:	50 e0       	ldi	r21, 0x00	; 0
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	70 e0       	ldi	r23, 0x00	; 0
 5c8:	cd 01       	movw	r24, r26
 5ca:	0e 94 90 00 	call	0x120	; 0x120 <LCDWritePackage>
				
				break;
 5ce:	17 c0       	rjmp	.+46     	; 0x5fe <__stack+0xff>
				
				case '9':
				
				LCDWritePackage(pos, 0b0001, 0b0101, 0b1011, 0b0001);
 5d0:	01 e0       	ldi	r16, 0x01	; 1
 5d2:	10 e0       	ldi	r17, 0x00	; 0
 5d4:	2b e0       	ldi	r18, 0x0B	; 11
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	45 e0       	ldi	r20, 0x05	; 5
 5da:	50 e0       	ldi	r21, 0x00	; 0
 5dc:	61 e0       	ldi	r22, 0x01	; 1
 5de:	70 e0       	ldi	r23, 0x00	; 0
 5e0:	cd 01       	movw	r24, r26
 5e2:	0e 94 90 00 	call	0x120	; 0x120 <LCDWritePackage>
				
				break;
 5e6:	0b c0       	rjmp	.+22     	; 0x5fe <__stack+0xff>
				
				
				default:
				
				LCDWritePackage(pos, 0b0001, 0b0001, 0b1000, 0b0010);	//Questionmark
 5e8:	02 e0       	ldi	r16, 0x02	; 2
 5ea:	10 e0       	ldi	r17, 0x00	; 0
 5ec:	28 e0       	ldi	r18, 0x08	; 8
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	41 e0       	ldi	r20, 0x01	; 1
 5f2:	50 e0       	ldi	r21, 0x00	; 0
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	70 e0       	ldi	r23, 0x00	; 0
 5f8:	cd 01       	movw	r24, r26
 5fa:	0e 94 90 00 	call	0x120	; 0x120 <LCDWritePackage>
				break;
			}
	
	}
	
}
 5fe:	1f 91       	pop	r17
 600:	0f 91       	pop	r16
 602:	08 95       	ret

00000604 <writeLong>:

	return 1;

}

void writeLong(long i){
 604:	8f 92       	push	r8
 606:	9f 92       	push	r9
 608:	af 92       	push	r10
 60a:	bf 92       	push	r11
 60c:	cf 92       	push	r12
 60e:	df 92       	push	r13
 610:	ef 92       	push	r14
 612:	ff 92       	push	r15
 614:	0f 93       	push	r16
 616:	1f 93       	push	r17
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29

	int pos = 5;

	while(i > 0){
 61c:	16 16       	cp	r1, r22
 61e:	17 06       	cpc	r1, r23
 620:	18 06       	cpc	r1, r24
 622:	19 06       	cpc	r1, r25
 624:	1c f5       	brge	.+70     	; 0x66c <writeLong+0x68>
 626:	c5 e0       	ldi	r28, 0x05	; 5
 628:	d0 e0       	ldi	r29, 0x00	; 0
	
		writeChar((i % 10) + '0', pos-- );
 62a:	0f 2e       	mov	r0, r31
 62c:	fa e0       	ldi	r31, 0x0A	; 10
 62e:	8f 2e       	mov	r8, r31
 630:	91 2c       	mov	r9, r1
 632:	a1 2c       	mov	r10, r1
 634:	b1 2c       	mov	r11, r1
 636:	f0 2d       	mov	r31, r0
 638:	8e 01       	movw	r16, r28
 63a:	01 50       	subi	r16, 0x01	; 1
 63c:	11 09       	sbc	r17, r1
 63e:	a5 01       	movw	r20, r10
 640:	94 01       	movw	r18, r8
 642:	0e 94 93 03 	call	0x726	; 0x726 <__divmodsi4>
 646:	c2 2e       	mov	r12, r18
 648:	d3 2e       	mov	r13, r19
 64a:	e4 2e       	mov	r14, r20
 64c:	f5 2e       	mov	r15, r21
 64e:	86 2f       	mov	r24, r22
 650:	be 01       	movw	r22, r28
 652:	80 5d       	subi	r24, 0xD0	; 208
 654:	0e 94 69 02 	call	0x4d2	; 0x4d2 <writeChar>
		i = i / 10;
 658:	6c 2d       	mov	r22, r12
 65a:	7d 2d       	mov	r23, r13
 65c:	8e 2d       	mov	r24, r14
 65e:	9f 2d       	mov	r25, r15

	int pos = 5;

	while(i > 0){
	
		writeChar((i % 10) + '0', pos-- );
 660:	e8 01       	movw	r28, r16

void writeLong(long i){

	int pos = 5;

	while(i > 0){
 662:	16 16       	cp	r1, r22
 664:	17 06       	cpc	r1, r23
 666:	18 06       	cpc	r1, r24
 668:	19 06       	cpc	r1, r25
 66a:	34 f3       	brlt	.-52     	; 0x638 <writeLong+0x34>
	
		writeChar((i % 10) + '0', pos-- );
		i = i / 10;
	}

}
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	1f 91       	pop	r17
 672:	0f 91       	pop	r16
 674:	ff 90       	pop	r15
 676:	ef 90       	pop	r14
 678:	df 90       	pop	r13
 67a:	cf 90       	pop	r12
 67c:	bf 90       	pop	r11
 67e:	af 90       	pop	r10
 680:	9f 90       	pop	r9
 682:	8f 90       	pop	r8
 684:	08 95       	ret

00000686 <clear>:
	
}

void clear(){
	
	LCDDR0 = 0x00;
 686:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
	LCDDR1 = 0x00;
 68a:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	LCDDR2 = 0x00;
 68e:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	LCDDR3 = 0x00;
 692:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>

	LCDDR5 = 0x00;
 696:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
	LCDDR6 = 0x00;
 69a:	10 92 f2 00 	sts	0x00F2, r1	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
	LCDDR7 = 0x00;
 69e:	10 92 f3 00 	sts	0x00F3, r1	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
	LCDDR8 = 0x00;
 6a2:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>

	LCDDR10 = 0x00;
 6a6:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
	LCDDR11 = 0x00;
 6aa:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
	LCDDR12 = 0x00;
 6ae:	10 92 f8 00 	sts	0x00F8, r1	; 0x8000f8 <__TEXT_REGION_LENGTH__+0x7e00f8>
	LCDDR13 = 0x00;
 6b2:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7e00f9>
	
	LCDDR15 = 0x00;
 6b6:	10 92 fb 00 	sts	0x00FB, r1	; 0x8000fb <__TEXT_REGION_LENGTH__+0x7e00fb>
	LCDDR16 = 0x00;
 6ba:	10 92 fc 00 	sts	0x00FC, r1	; 0x8000fc <__TEXT_REGION_LENGTH__+0x7e00fc>
	LCDDR17 = 0x00;
 6be:	10 92 fd 00 	sts	0x00FD, r1	; 0x8000fd <__TEXT_REGION_LENGTH__+0x7e00fd>
	LCDDR18 = 0x00;
 6c2:	10 92 fe 00 	sts	0x00FE, r1	; 0x8000fe <__TEXT_REGION_LENGTH__+0x7e00fe>
 6c6:	08 95       	ret

000006c8 <primes>:

}

void primes(){

	long i = 0;
 6c8:	c1 2c       	mov	r12, r1
 6ca:	d1 2c       	mov	r13, r1
 6cc:	76 01       	movw	r14, r12

	while(1){
	
		if(isPrime(i)){
 6ce:	c7 01       	movw	r24, r14
 6d0:	b6 01       	movw	r22, r12
 6d2:	0e 94 44 00 	call	0x88	; 0x88 <isPrime>
 6d6:	89 2b       	or	r24, r25
 6d8:	79 f0       	breq	.+30     	; 0x6f8 <primes+0x30>
			clear();
 6da:	0e 94 43 03 	call	0x686	; 0x686 <clear>
			writeLong(i);
 6de:	c7 01       	movw	r24, r14
 6e0:	b6 01       	movw	r22, r12
 6e2:	0e 94 02 03 	call	0x604	; 0x604 <writeLong>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6e6:	2f e3       	ldi	r18, 0x3F	; 63
 6e8:	82 e4       	ldi	r24, 0x42	; 66
 6ea:	9f e0       	ldi	r25, 0x0F	; 15
 6ec:	21 50       	subi	r18, 0x01	; 1
 6ee:	80 40       	sbci	r24, 0x00	; 0
 6f0:	90 40       	sbci	r25, 0x00	; 0
 6f2:	e1 f7       	brne	.-8      	; 0x6ec <primes+0x24>
 6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <primes+0x2e>
 6f6:	00 00       	nop
			_delay_ms(500);
			
		
		}

		i++;
 6f8:	2f ef       	ldi	r18, 0xFF	; 255
 6fa:	c2 1a       	sub	r12, r18
 6fc:	d2 0a       	sbc	r13, r18
 6fe:	e2 0a       	sbc	r14, r18
 700:	f2 0a       	sbc	r15, r18
	
	}
 702:	e5 cf       	rjmp	.-54     	; 0x6ce <primes+0x6>

00000704 <LCD_Init>:
	
}

void LCD_Init(){
	
	LCDCRB = (1<<LCDCS) | (1<<LCDMUX1) | (1<<LCDMUX0) | (1<<LCDPM2) | (1<<LCDPM1) | (1<<LCDPM0);
 704:	87 eb       	ldi	r24, 0xB7	; 183
 706:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
	LCDFRR = (0<<LCDPS2) | (1<<LCDCD2) | (1<<LCDCD1) | (1<<LCDCD0);
 70a:	87 e0       	ldi	r24, 0x07	; 7
 70c:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
	LCDCCR = (1<<LCDCC3) | (1<<LCDCC2) | (1<<LCDCC1) | (1<<LCDCC0);
 710:	8f e0       	ldi	r24, 0x0F	; 15
 712:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
	LCDCRA = (1<<LCDEN);
 716:	80 e8       	ldi	r24, 0x80	; 128
 718:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
 71c:	08 95       	ret

0000071e <main>:
int isPrime(long i);

int main(void)
{
	
	LCD_Init();
 71e:	0e 94 82 03 	call	0x704	; 0x704 <LCD_Init>

	primes();
 722:	0e 94 64 03 	call	0x6c8	; 0x6c8 <primes>

00000726 <__divmodsi4>:
 726:	05 2e       	mov	r0, r21
 728:	97 fb       	bst	r25, 7
 72a:	1e f4       	brtc	.+6      	; 0x732 <__divmodsi4+0xc>
 72c:	00 94       	com	r0
 72e:	0e 94 aa 03 	call	0x754	; 0x754 <__negsi2>
 732:	57 fd       	sbrc	r21, 7
 734:	07 d0       	rcall	.+14     	; 0x744 <__divmodsi4_neg2>
 736:	0e 94 b8 03 	call	0x770	; 0x770 <__udivmodsi4>
 73a:	07 fc       	sbrc	r0, 7
 73c:	03 d0       	rcall	.+6      	; 0x744 <__divmodsi4_neg2>
 73e:	4e f4       	brtc	.+18     	; 0x752 <__divmodsi4_exit>
 740:	0c 94 aa 03 	jmp	0x754	; 0x754 <__negsi2>

00000744 <__divmodsi4_neg2>:
 744:	50 95       	com	r21
 746:	40 95       	com	r20
 748:	30 95       	com	r19
 74a:	21 95       	neg	r18
 74c:	3f 4f       	sbci	r19, 0xFF	; 255
 74e:	4f 4f       	sbci	r20, 0xFF	; 255
 750:	5f 4f       	sbci	r21, 0xFF	; 255

00000752 <__divmodsi4_exit>:
 752:	08 95       	ret

00000754 <__negsi2>:
 754:	90 95       	com	r25
 756:	80 95       	com	r24
 758:	70 95       	com	r23
 75a:	61 95       	neg	r22
 75c:	7f 4f       	sbci	r23, 0xFF	; 255
 75e:	8f 4f       	sbci	r24, 0xFF	; 255
 760:	9f 4f       	sbci	r25, 0xFF	; 255
 762:	08 95       	ret

00000764 <__tablejump2__>:
 764:	ee 0f       	add	r30, r30
 766:	ff 1f       	adc	r31, r31
 768:	05 90       	lpm	r0, Z+
 76a:	f4 91       	lpm	r31, Z
 76c:	e0 2d       	mov	r30, r0
 76e:	09 94       	ijmp

00000770 <__udivmodsi4>:
 770:	a1 e2       	ldi	r26, 0x21	; 33
 772:	1a 2e       	mov	r1, r26
 774:	aa 1b       	sub	r26, r26
 776:	bb 1b       	sub	r27, r27
 778:	fd 01       	movw	r30, r26
 77a:	0d c0       	rjmp	.+26     	; 0x796 <__udivmodsi4_ep>

0000077c <__udivmodsi4_loop>:
 77c:	aa 1f       	adc	r26, r26
 77e:	bb 1f       	adc	r27, r27
 780:	ee 1f       	adc	r30, r30
 782:	ff 1f       	adc	r31, r31
 784:	a2 17       	cp	r26, r18
 786:	b3 07       	cpc	r27, r19
 788:	e4 07       	cpc	r30, r20
 78a:	f5 07       	cpc	r31, r21
 78c:	20 f0       	brcs	.+8      	; 0x796 <__udivmodsi4_ep>
 78e:	a2 1b       	sub	r26, r18
 790:	b3 0b       	sbc	r27, r19
 792:	e4 0b       	sbc	r30, r20
 794:	f5 0b       	sbc	r31, r21

00000796 <__udivmodsi4_ep>:
 796:	66 1f       	adc	r22, r22
 798:	77 1f       	adc	r23, r23
 79a:	88 1f       	adc	r24, r24
 79c:	99 1f       	adc	r25, r25
 79e:	1a 94       	dec	r1
 7a0:	69 f7       	brne	.-38     	; 0x77c <__udivmodsi4_loop>
 7a2:	60 95       	com	r22
 7a4:	70 95       	com	r23
 7a6:	80 95       	com	r24
 7a8:	90 95       	com	r25
 7aa:	9b 01       	movw	r18, r22
 7ac:	ac 01       	movw	r20, r24
 7ae:	bd 01       	movw	r22, r26
 7b0:	cf 01       	movw	r24, r30
 7b2:	08 95       	ret

000007b4 <_exit>:
 7b4:	f8 94       	cli

000007b6 <__stop_program>:
 7b6:	ff cf       	rjmp	.-2      	; 0x7b6 <__stop_program>
